
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'statementsAND BOOL_TYPE CHAR CHAR_TYPE COMMA CONST EQ EQUALS FLOAT FLOAT_TYPE GT GTE ID INTEGER INT_TYPE LBRACKET LPAREN LT LTE NEQ NOT NUMBER OR RBRACKET RPAREN SEMICOLONstatements : statement\n| statement statements statement : simple_assignment\n| array_declaration\n| array_assignment\n| type declaration_list SEMICOLON\n| const_declarationsimple_assignment : ID EQUALS expression SEMICOLONconst_declaration : CONST type ID EQUALS expression SEMICOLONarray_declaration : type ID LBRACKET INTEGER RBRACKET SEMICOLONdeclaration_list : declaration\n| declaration COMMA declaration_listdeclaration : ID\n| ID EQUALS expression\n| ID LBRACKET INTEGER RBRACKETexpression : ID\n| FLOAT\n| INTEGER\n| CHARtype : INT_TYPE\n| FLOAT_TYPE\n| BOOL_TYPE\n| CHAR_TYPEexpression : termterm : factorfactor : INTEGERexpression : expression OR expressionexpression :  expression  AND expression  expression : expression EQ expression\n| expression NEQ expression\n| expression LT expression\n| expression GT expression\n| expression LTE expression\n| expression GTE expressionexpression : NOT expressioncomparison : LPAREN expression RPARENcomparison : INTEGERfactor : comparisonfactor : IDfactor : ID LBRACKET expression RBRACKETarray_assignment : ID LBRACKET expression RBRACKET EQUALS expression SEMICOLON'
    
_lr_action_items = {'ID':([0,2,3,4,5,6,7,9,10,11,12,18,19,20,21,23,24,31,34,41,42,43,44,45,46,47,48,49,50,54,67,69,73,75,],[8,8,-3,-4,-5,16,-7,-20,-21,-22,-23,25,25,36,-6,25,40,25,25,25,-8,25,25,25,25,25,25,25,25,25,25,-10,-9,-41,]),'INT_TYPE':([0,2,3,4,5,7,13,21,42,69,73,75,],[9,9,-3,-4,-5,-7,9,-6,-8,-10,-9,-41,]),'FLOAT_TYPE':([0,2,3,4,5,7,13,21,42,69,73,75,],[10,10,-3,-4,-5,-7,10,-6,-8,-10,-9,-41,]),'BOOL_TYPE':([0,2,3,4,5,7,13,21,42,69,73,75,],[11,11,-3,-4,-5,-7,11,-6,-8,-10,-9,-41,]),'CHAR_TYPE':([0,2,3,4,5,7,13,21,42,69,73,75,],[12,12,-3,-4,-5,-7,12,-6,-8,-10,-9,-41,]),'CONST':([0,2,3,4,5,7,21,42,69,73,75,],[13,13,-3,-4,-5,-7,-6,-8,-10,-9,-41,]),'$end':([1,2,3,4,5,7,14,21,42,69,73,75,],[0,-1,-3,-4,-5,-7,-2,-6,-8,-10,-9,-41,]),'EQUALS':([8,16,36,40,53,],[18,23,54,23,67,]),'LBRACKET':([8,16,25,40,],[19,22,41,56,]),'SEMICOLON':([15,16,17,25,26,27,28,29,30,32,33,38,39,40,51,55,58,59,60,61,62,63,64,65,66,68,71,72,74,],[21,-13,-11,-16,42,-17,-18,-19,-24,-25,-38,-14,-12,-13,-35,69,-27,-28,-29,-30,-31,-32,-33,-34,-36,73,-40,75,-15,]),'COMMA':([16,17,25,27,28,29,30,32,33,38,40,51,55,58,59,60,61,62,63,64,65,66,71,74,],[-13,24,-16,-17,-18,-19,-24,-25,-38,-14,-13,-35,-15,-27,-28,-29,-30,-31,-32,-33,-34,-36,-40,-15,]),'FLOAT':([18,19,23,31,34,41,43,44,45,46,47,48,49,50,54,67,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'INTEGER':([18,19,22,23,31,34,41,43,44,45,46,47,48,49,50,54,56,67,],[28,28,37,28,28,28,28,28,28,28,28,28,28,28,28,28,70,28,]),'CHAR':([18,19,23,31,34,41,43,44,45,46,47,48,49,50,54,67,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'NOT':([18,19,23,31,34,41,43,44,45,46,47,48,49,50,54,67,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'LPAREN':([18,19,23,31,34,41,43,44,45,46,47,48,49,50,54,67,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'OR':([25,26,27,28,29,30,32,33,35,38,51,52,57,58,59,60,61,62,63,64,65,66,68,71,72,],[-16,43,-17,-18,-19,-24,-25,-38,43,43,43,43,43,43,43,43,43,43,43,43,43,-36,43,-40,43,]),'AND':([25,26,27,28,29,30,32,33,35,38,51,52,57,58,59,60,61,62,63,64,65,66,68,71,72,],[-16,44,-17,-18,-19,-24,-25,-38,44,44,44,44,44,44,44,44,44,44,44,44,44,-36,44,-40,44,]),'EQ':([25,26,27,28,29,30,32,33,35,38,51,52,57,58,59,60,61,62,63,64,65,66,68,71,72,],[-16,45,-17,-18,-19,-24,-25,-38,45,45,45,45,45,45,45,45,45,45,45,45,45,-36,45,-40,45,]),'NEQ':([25,26,27,28,29,30,32,33,35,38,51,52,57,58,59,60,61,62,63,64,65,66,68,71,72,],[-16,46,-17,-18,-19,-24,-25,-38,46,46,46,46,46,46,46,46,46,46,46,46,46,-36,46,-40,46,]),'LT':([25,26,27,28,29,30,32,33,35,38,51,52,57,58,59,60,61,62,63,64,65,66,68,71,72,],[-16,47,-17,-18,-19,-24,-25,-38,47,47,47,47,47,47,47,47,47,47,47,47,47,-36,47,-40,47,]),'GT':([25,26,27,28,29,30,32,33,35,38,51,52,57,58,59,60,61,62,63,64,65,66,68,71,72,],[-16,48,-17,-18,-19,-24,-25,-38,48,48,48,48,48,48,48,48,48,48,48,48,48,-36,48,-40,48,]),'LTE':([25,26,27,28,29,30,32,33,35,38,51,52,57,58,59,60,61,62,63,64,65,66,68,71,72,],[-16,49,-17,-18,-19,-24,-25,-38,49,49,49,49,49,49,49,49,49,49,49,49,49,-36,49,-40,49,]),'GTE':([25,26,27,28,29,30,32,33,35,38,51,52,57,58,59,60,61,62,63,64,65,66,68,71,72,],[-16,50,-17,-18,-19,-24,-25,-38,50,50,50,50,50,50,50,50,50,50,50,50,50,-36,50,-40,50,]),'RBRACKET':([25,27,28,29,30,32,33,35,37,51,57,58,59,60,61,62,63,64,65,66,70,71,],[-16,-17,-18,-19,-24,-25,-38,53,55,-35,71,-27,-28,-29,-30,-31,-32,-33,-34,-36,74,-40,]),'RPAREN':([25,27,28,29,30,32,33,51,52,58,59,60,61,62,63,64,65,66,71,],[-16,-17,-18,-19,-24,-25,-38,-35,66,-27,-28,-29,-30,-31,-32,-33,-34,-36,-40,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statements':([0,2,],[1,14,]),'statement':([0,2,],[2,2,]),'simple_assignment':([0,2,],[3,3,]),'array_declaration':([0,2,],[4,4,]),'array_assignment':([0,2,],[5,5,]),'type':([0,2,13,],[6,6,20,]),'const_declaration':([0,2,],[7,7,]),'declaration_list':([6,24,],[15,39,]),'declaration':([6,24,],[17,17,]),'expression':([18,19,23,31,34,41,43,44,45,46,47,48,49,50,54,67,],[26,35,38,51,52,57,58,59,60,61,62,63,64,65,68,72,]),'term':([18,19,23,31,34,41,43,44,45,46,47,48,49,50,54,67,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'factor':([18,19,23,31,34,41,43,44,45,46,47,48,49,50,54,67,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'comparison':([18,19,23,31,34,41,43,44,45,46,47,48,49,50,54,67,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statements","S'",1,None,None,None),
  ('statements -> statement','statements',1,'p_statements','parser.py',125),
  ('statements -> statement statements','statements',2,'p_statements','parser.py',126),
  ('statement -> simple_assignment','statement',1,'p_statement','parser.py',132),
  ('statement -> array_declaration','statement',1,'p_statement','parser.py',133),
  ('statement -> array_assignment','statement',1,'p_statement','parser.py',134),
  ('statement -> type declaration_list SEMICOLON','statement',3,'p_statement','parser.py',135),
  ('statement -> const_declaration','statement',1,'p_statement','parser.py',136),
  ('simple_assignment -> ID EQUALS expression SEMICOLON','simple_assignment',4,'p_simple_assignment','parser.py',140),
  ('const_declaration -> CONST type ID EQUALS expression SEMICOLON','const_declaration',6,'p_const_declaration','parser.py',150),
  ('array_declaration -> type ID LBRACKET INTEGER RBRACKET SEMICOLON','array_declaration',6,'p_array_declaration','parser.py',157),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',171),
  ('declaration_list -> declaration COMMA declaration_list','declaration_list',3,'p_declaration_list','parser.py',172),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',179),
  ('declaration -> ID EQUALS expression','declaration',3,'p_declaration','parser.py',180),
  ('declaration -> ID LBRACKET INTEGER RBRACKET','declaration',4,'p_declaration','parser.py',181),
  ('expression -> ID','expression',1,'p_expression','parser.py',199),
  ('expression -> FLOAT','expression',1,'p_expression','parser.py',200),
  ('expression -> INTEGER','expression',1,'p_expression','parser.py',201),
  ('expression -> CHAR','expression',1,'p_expression','parser.py',202),
  ('type -> INT_TYPE','type',1,'p_type','parser.py',211),
  ('type -> FLOAT_TYPE','type',1,'p_type','parser.py',212),
  ('type -> BOOL_TYPE','type',1,'p_type','parser.py',213),
  ('type -> CHAR_TYPE','type',1,'p_type','parser.py',214),
  ('expression -> term','expression',1,'p_expression_term','parser.py',219),
  ('term -> factor','term',1,'p_term_factor','parser.py',224),
  ('factor -> INTEGER','factor',1,'p_factor_num','parser.py',229),
  ('expression -> expression OR expression','expression',3,'p_expression_or','parser.py',232),
  ('expression -> expression AND expression','expression',3,'p_expression_and','parser.py',237),
  ('expression -> expression EQ expression','expression',3,'p_expression_comparison','parser.py',241),
  ('expression -> expression NEQ expression','expression',3,'p_expression_comparison','parser.py',242),
  ('expression -> expression LT expression','expression',3,'p_expression_comparison','parser.py',243),
  ('expression -> expression GT expression','expression',3,'p_expression_comparison','parser.py',244),
  ('expression -> expression LTE expression','expression',3,'p_expression_comparison','parser.py',245),
  ('expression -> expression GTE expression','expression',3,'p_expression_comparison','parser.py',246),
  ('expression -> NOT expression','expression',2,'p_expression_not','parser.py',261),
  ('comparison -> LPAREN expression RPAREN','comparison',3,'p_comparison_expr','parser.py',265),
  ('comparison -> INTEGER','comparison',1,'p_comparison_number','parser.py',270),
  ('factor -> comparison','factor',1,'p_factor_comparison','parser.py',275),
  ('factor -> ID','factor',1,'p_factor_id','parser.py',284),
  ('factor -> ID LBRACKET expression RBRACKET','factor',4,'p_array_access','parser.py',299),
  ('array_assignment -> ID LBRACKET expression RBRACKET EQUALS expression SEMICOLON','array_assignment',7,'p_array_assignment','parser.py',316),
]
