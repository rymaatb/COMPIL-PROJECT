
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BOOL BOOL_TYPE CHAR CHAR_TYPE COLON COMMA COMMENT CONST DECLARATION DIVIDE ELSE EQ EQUALS FLOAT FLOAT_TYPE FOR GT GTE ID IF INSTRUCTION INT INT_TYPE LBRACE LBRACKET LPAREN LT LTE MINUS MULTIPLY NEQ NOT NUMBER OR PLUS RBRACE RBRACKET READ RPAREN SEMICOLON VAR_GLOBAL WRITEstatement : type declaration_list SEMICOLON\n                 | CONST type ID EQUALS expression SEMICOLONdeclaration_list : declaration\n                        | declaration COMMA declaration_listdeclaration : ID\n                   | ID EQUALS expression\n                   | ID LBRACKET NUMBER RBRACKETexpression : ID\n                  | FLOAT\n                  | INT\n                  | CHARtype : INT_TYPE\n            | FLOAT_TYPE\n            | BOOL_TYPE\n            | CHAR_TYPE'
    
_lr_action_items = {'CONST':([0,],[3,]),'INT_TYPE':([0,3,],[4,4,]),'FLOAT_TYPE':([0,3,],[5,5,]),'BOOL_TYPE':([0,3,],[6,6,]),'CHAR_TYPE':([0,3,],[7,7,]),'$end':([1,12,27,],[0,-1,-2,]),'ID':([2,4,5,6,7,11,13,14,24,],[10,-12,-13,-14,-15,16,10,18,18,]),'SEMICOLON':([8,9,10,17,18,19,20,21,22,25,26,],[12,-3,-5,-4,-8,-6,-9,-10,-11,-7,27,]),'COMMA':([9,10,18,19,20,21,22,25,],[13,-5,-8,-6,-9,-10,-11,-7,]),'EQUALS':([10,16,],[14,24,]),'LBRACKET':([10,],[15,]),'FLOAT':([14,24,],[20,20,]),'INT':([14,24,],[21,21,]),'CHAR':([14,24,],[22,22,]),'NUMBER':([15,],[23,]),'RBRACKET':([23,],[25,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'type':([0,3,],[2,11,]),'declaration_list':([2,13,],[8,17,]),'declaration':([2,13,],[9,9,]),'expression':([14,24,],[19,26,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> type declaration_list SEMICOLON','statement',3,'p_statement_declaration','parser.py',8),
  ('statement -> CONST type ID EQUALS expression SEMICOLON','statement',6,'p_statement_declaration','parser.py',9),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',20),
  ('declaration_list -> declaration COMMA declaration_list','declaration_list',3,'p_declaration_list','parser.py',21),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',28),
  ('declaration -> ID EQUALS expression','declaration',3,'p_declaration','parser.py',29),
  ('declaration -> ID LBRACKET NUMBER RBRACKET','declaration',4,'p_declaration','parser.py',30),
  ('expression -> ID','expression',1,'p_expression','parser.py',40),
  ('expression -> FLOAT','expression',1,'p_expression','parser.py',41),
  ('expression -> INT','expression',1,'p_expression','parser.py',42),
  ('expression -> CHAR','expression',1,'p_expression','parser.py',43),
  ('type -> INT_TYPE','type',1,'p_type','parser.py',47),
  ('type -> FLOAT_TYPE','type',1,'p_type','parser.py',48),
  ('type -> BOOL_TYPE','type',1,'p_type','parser.py',49),
  ('type -> CHAR_TYPE','type',1,'p_type','parser.py',50),
]
