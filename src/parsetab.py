
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BOOL BOOL_TYPE CHAR CHAR_TYPE COLON COMMA COMMENT CONST DECLARATION DIVIDE ELSE EQ EQUALS FLOAT FLOAT_TYPE FOR GT GTE ID IF INSTRUCTION INT INT_TYPE LBRACE LBRACKET LPAREN LT LTE MINUS MULTIPLY NEQ NOT NUMBER OR PLUS RBRACE RBRACKET READ RPAREN SEMICOLON VAR_GLOBAL WRITEdeclaration : type ID LBRACKET NUMBER RBRACKET SEMICOLONstatement : type declaration_list SEMICOLON\n| CONST type ID EQUALS expression SEMICOLON\n| type ID LBRACKET NUMBER RBRACKET SEMICOLONdeclaration_list : declaration\n| declaration COMMA declaration_listdeclaration : ID\n| ID EQUALS expression\n| ID LBRACKET NUMBER RBRACKETexpression : ID\n| FLOAT\n| INT\n| CHARstatement : ID LBRACKET expression RBRACKET EQUALS expression SEMICOLONstatement : ID EQUALS expression SEMICOLONfactor : ID LBRACKET expression RBRACKETtype : INT_TYPE\n| FLOAT_TYPE\n| BOOL_TYPE\n| CHAR_TYPEexpression : termterm : factorfactor : NUMBERexpression : expression OR expressionexpression :  expression  AND expression  expression : expression EQ expression\n| expression NEQ expression\n| expression LT expression\n| expression GT expression\n| expression LTE expression\n| expression GTE expressionexpression : NOT expressioncomparison : LPAREN expression RPARENcomparison : NUMBERfactor : comparisonfactor : ID'
    
_lr_action_items = {'ID':([0,2,4,5,6,7,9,18,22,25,26,27,28,29,30,31,32,33,],[3,8,-17,-18,-19,-20,12,12,12,12,12,12,12,12,12,12,12,12,]),'INT_TYPE':([0,],[4,]),'FLOAT_TYPE':([0,],[5,]),'BOOL_TYPE':([0,],[6,]),'CHAR_TYPE':([0,],[7,]),'$end':([1,3,12,13,14,15,16,17,19,20,21,34,36,39,40,41,42,43,44,45,46,47,48,49,],[0,-7,-10,-8,-11,-12,-13,-21,-22,-23,-35,-32,-9,-24,-25,-26,-27,-28,-29,-30,-31,-33,-1,-16,]),'EQUALS':([3,],[9,]),'LBRACKET':([3,8,12,],[10,11,25,]),'FLOAT':([9,18,22,25,26,27,28,29,30,31,32,33,],[14,14,14,14,14,14,14,14,14,14,14,14,]),'INT':([9,18,22,25,26,27,28,29,30,31,32,33,],[15,15,15,15,15,15,15,15,15,15,15,15,]),'CHAR':([9,18,22,25,26,27,28,29,30,31,32,33,],[16,16,16,16,16,16,16,16,16,16,16,16,]),'NOT':([9,18,22,25,26,27,28,29,30,31,32,33,],[18,18,18,18,18,18,18,18,18,18,18,18,]),'NUMBER':([9,10,11,18,22,25,26,27,28,29,30,31,32,33,],[20,23,24,20,20,20,20,20,20,20,20,20,20,20,]),'LPAREN':([9,18,22,25,26,27,28,29,30,31,32,33,],[22,22,22,22,22,22,22,22,22,22,22,22,]),'OR':([12,13,14,15,16,17,19,20,21,34,35,38,39,40,41,42,43,44,45,46,47,49,],[-10,26,-11,-12,-13,-21,-22,-23,-35,26,26,26,26,26,26,26,26,26,26,26,-33,-16,]),'AND':([12,13,14,15,16,17,19,20,21,34,35,38,39,40,41,42,43,44,45,46,47,49,],[-10,27,-11,-12,-13,-21,-22,-23,-35,27,27,27,27,27,27,27,27,27,27,27,-33,-16,]),'EQ':([12,13,14,15,16,17,19,20,21,34,35,38,39,40,41,42,43,44,45,46,47,49,],[-10,28,-11,-12,-13,-21,-22,-23,-35,28,28,28,28,28,28,28,28,28,28,28,-33,-16,]),'NEQ':([12,13,14,15,16,17,19,20,21,34,35,38,39,40,41,42,43,44,45,46,47,49,],[-10,29,-11,-12,-13,-21,-22,-23,-35,29,29,29,29,29,29,29,29,29,29,29,-33,-16,]),'LT':([12,13,14,15,16,17,19,20,21,34,35,38,39,40,41,42,43,44,45,46,47,49,],[-10,30,-11,-12,-13,-21,-22,-23,-35,30,30,30,30,30,30,30,30,30,30,30,-33,-16,]),'GT':([12,13,14,15,16,17,19,20,21,34,35,38,39,40,41,42,43,44,45,46,47,49,],[-10,31,-11,-12,-13,-21,-22,-23,-35,31,31,31,31,31,31,31,31,31,31,31,-33,-16,]),'LTE':([12,13,14,15,16,17,19,20,21,34,35,38,39,40,41,42,43,44,45,46,47,49,],[-10,32,-11,-12,-13,-21,-22,-23,-35,32,32,32,32,32,32,32,32,32,32,32,-33,-16,]),'GTE':([12,13,14,15,16,17,19,20,21,34,35,38,39,40,41,42,43,44,45,46,47,49,],[-10,33,-11,-12,-13,-21,-22,-23,-35,33,33,33,33,33,33,33,33,33,33,33,-33,-16,]),'RPAREN':([12,14,15,16,17,19,20,21,34,35,39,40,41,42,43,44,45,46,47,49,],[-10,-11,-12,-13,-21,-22,-23,-35,-32,47,-24,-25,-26,-27,-28,-29,-30,-31,-33,-16,]),'RBRACKET':([12,14,15,16,17,19,20,21,23,24,34,38,39,40,41,42,43,44,45,46,47,49,],[-10,-11,-12,-13,-21,-22,-23,-35,36,37,-32,49,-24,-25,-26,-27,-28,-29,-30,-31,-33,-16,]),'SEMICOLON':([37,],[48,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'declaration':([0,],[1,]),'type':([0,],[2,]),'expression':([9,18,22,25,26,27,28,29,30,31,32,33,],[13,34,35,38,39,40,41,42,43,44,45,46,]),'term':([9,18,22,25,26,27,28,29,30,31,32,33,],[17,17,17,17,17,17,17,17,17,17,17,17,]),'factor':([9,18,22,25,26,27,28,29,30,31,32,33,],[19,19,19,19,19,19,19,19,19,19,19,19,]),'comparison':([9,18,22,25,26,27,28,29,30,31,32,33,],[21,21,21,21,21,21,21,21,21,21,21,21,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> declaration","S'",1,None,None,None),
  ('declaration -> type ID LBRACKET NUMBER RBRACKET SEMICOLON','declaration',6,'p_array_declaration','parser.py',35),
  ('statement -> type declaration_list SEMICOLON','statement',3,'p_statement_declaration','parser.py',45),
  ('statement -> CONST type ID EQUALS expression SEMICOLON','statement',6,'p_statement_declaration','parser.py',46),
  ('statement -> type ID LBRACKET NUMBER RBRACKET SEMICOLON','statement',6,'p_statement_declaration','parser.py',47),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',67),
  ('declaration_list -> declaration COMMA declaration_list','declaration_list',3,'p_declaration_list','parser.py',68),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',75),
  ('declaration -> ID EQUALS expression','declaration',3,'p_declaration','parser.py',76),
  ('declaration -> ID LBRACKET NUMBER RBRACKET','declaration',4,'p_declaration','parser.py',77),
  ('expression -> ID','expression',1,'p_expression','parser.py',87),
  ('expression -> FLOAT','expression',1,'p_expression','parser.py',88),
  ('expression -> INT','expression',1,'p_expression','parser.py',89),
  ('expression -> CHAR','expression',1,'p_expression','parser.py',90),
  ('statement -> ID LBRACKET expression RBRACKET EQUALS expression SEMICOLON','statement',7,'p_array_assignment','parser.py',93),
  ('statement -> ID EQUALS expression SEMICOLON','statement',4,'p_statement_assignment','parser.py',107),
  ('factor -> ID LBRACKET expression RBRACKET','factor',4,'p_array_access','parser.py',114),
  ('type -> INT_TYPE','type',1,'p_type','parser.py',133),
  ('type -> FLOAT_TYPE','type',1,'p_type','parser.py',134),
  ('type -> BOOL_TYPE','type',1,'p_type','parser.py',135),
  ('type -> CHAR_TYPE','type',1,'p_type','parser.py',136),
  ('expression -> term','expression',1,'p_expression_term','parser.py',141),
  ('term -> factor','term',1,'p_term_factor','parser.py',146),
  ('factor -> NUMBER','factor',1,'p_factor_num','parser.py',151),
  ('expression -> expression OR expression','expression',3,'p_expression_or','parser.py',154),
  ('expression -> expression AND expression','expression',3,'p_expression_and','parser.py',159),
  ('expression -> expression EQ expression','expression',3,'p_expression_comparison','parser.py',163),
  ('expression -> expression NEQ expression','expression',3,'p_expression_comparison','parser.py',164),
  ('expression -> expression LT expression','expression',3,'p_expression_comparison','parser.py',165),
  ('expression -> expression GT expression','expression',3,'p_expression_comparison','parser.py',166),
  ('expression -> expression LTE expression','expression',3,'p_expression_comparison','parser.py',167),
  ('expression -> expression GTE expression','expression',3,'p_expression_comparison','parser.py',168),
  ('expression -> NOT expression','expression',2,'p_expression_not','parser.py',183),
  ('comparison -> LPAREN expression RPAREN','comparison',3,'p_comparison_expr','parser.py',187),
  ('comparison -> NUMBER','comparison',1,'p_comparison_number','parser.py',192),
  ('factor -> comparison','factor',1,'p_factor_comparison','parser.py',197),
  ('factor -> ID','factor',1,'p_factor_id','parser.py',206),
]
