
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BOOL BOOL_TYPE CHAR CHAR_TYPE COLON COMMA COMMENT CONST DECLARATION DIVIDE ELSE EQ EQUALS FALSE FLOAT FLOAT_TYPE FOR GT GTE ID IF INSTRUCTION INTEGER INT_TYPE LBRACE LBRACKET LPAREN LT LTE MINUS MULTIPLY NEQ NOT NUMBER OR PLUS RBRACE RBRACKET READ RPAREN SEMICOLON STRING TRUE VAR_GLOBAL WRITEstatement : type declaration_list SEMICOLON\n                 | CONST type ID EQUALS expression SEMICOLONdeclaration_list : declaration\n                        | declaration COMMA declaration_listdeclaration : ID\n                   | ID EQUALS expressionstatement : ID EQUALS expression SEMICOLONtype : INT_TYPE\n            | FLOAT_TYPE\n            | BOOL_TYPE\n            | CHAR_TYPEfactor : INTEGER\n              | FLOAT\n              | CHAR\n              | BOOL\n              | MINUS factor\n              | PLUS factor\n              | LPAREN INTEGER RPAREN\n              | LPAREN FLOAT RPAREN\n              | LPAREN MINUS FLOAT RPAREN\n              statements : statement\n                  | statement statements statement : simple_assignment\n                 | array_declarationTab\n                 | array_assignment\n                 | type declarationTab_listTab SEMICOLON\n                 | const_declarationTabsimple_assignment : ID EQUALS expressionTab SEMICOLONconst_declarationTab : CONST type ID EQUALS expressionTab SEMICOLONarray_declarationTab : type ID LBRACKET INTEGER RBRACKET SEMICOLONdeclarationTab_listTab : declarationTab\n                        | declarationTab COMMA declarationTab_listTabdeclarationTab : ID\n                   | ID EQUALS expressionTab\n                   | ID LBRACKET INTEGER RBRACKETexpressionTab : ID\n                  | FLOAT\n                  | INTEGER\n                  | CHARfactor : ID LBRACKET expressionTab RBRACKETarray_assignment : ID LBRACKET expressionTab RBRACKET EQUALS expressionTab SEMICOLONexpression : expression OR term\n                  | termterm : term AND factor \n            | factorfactor : ID\n              | TRUE\n              | FALSE\n              | NOT IDstatement : READ LPAREN ID RPAREN SEMICOLON\n                 | READ LPAREN ID LBRACKET INTEGER RBRACKET RPAREN SEMICOLONstatement : WRITE LPAREN write_content RPAREN SEMICOLONwrite_content : write_itemwrite_content : write_content COMMA write_itemwrite_item : ID\n                  | ID LBRACKET INTEGER RBRACKET\n                  | STRINGstatement : FOR LPAREN initialisation COLON step COLON BorneSup RPAREN block initialisation : ID EQUALS INTEGERstep : INTEGER\n            | IDBorneSup : IDblock : LBRACE statements RBRACE'
    
_lr_action_items = {'CONST':([0,5,6,7,8,27,28,70,72,105,107,114,116,117,125,129,131,132,134,135,],[3,-23,-24,-25,-27,-1,-26,-7,-28,-50,-52,-30,-2,-29,-41,-51,-58,3,3,-63,]),'ID':([0,2,5,6,7,8,12,13,14,15,21,22,23,24,25,26,27,28,30,31,32,43,44,48,68,69,70,71,72,73,88,90,93,94,104,105,107,114,116,117,123,125,129,131,132,134,135,],[4,18,-23,-24,-25,-27,-8,-9,-10,-11,33,34,49,54,57,60,-1,-26,34,65,67,78,78,83,34,49,-7,78,-28,78,57,112,78,49,49,-50,-52,-30,-2,-29,128,-41,-51,-58,4,4,-63,]),'READ':([0,5,6,7,8,27,28,70,72,105,107,114,116,117,125,129,131,132,134,135,],[9,-23,-24,-25,-27,-1,-26,-7,-28,-50,-52,-30,-2,-29,-41,-51,-58,9,9,-63,]),'WRITE':([0,5,6,7,8,27,28,70,72,105,107,114,116,117,125,129,131,132,134,135,],[10,-23,-24,-25,-27,-1,-26,-7,-28,-50,-52,-30,-2,-29,-41,-51,-58,10,10,-63,]),'FOR':([0,5,6,7,8,27,28,70,72,105,107,114,116,117,125,129,131,132,134,135,],[11,-23,-24,-25,-27,-1,-26,-7,-28,-50,-52,-30,-2,-29,-41,-51,-58,11,11,-63,]),'INT_TYPE':([0,3,5,6,7,8,27,28,70,72,105,107,114,116,117,125,129,131,132,134,135,],[12,12,-23,-24,-25,-27,-1,-26,-7,-28,-50,-52,-30,-2,-29,-41,-51,-58,12,12,-63,]),'FLOAT_TYPE':([0,3,5,6,7,8,27,28,70,72,105,107,114,116,117,125,129,131,132,134,135,],[13,13,-23,-24,-25,-27,-1,-26,-7,-28,-50,-52,-30,-2,-29,-41,-51,-58,13,13,-63,]),'BOOL_TYPE':([0,3,5,6,7,8,27,28,70,72,105,107,114,116,117,125,129,131,132,134,135,],[14,14,-23,-24,-25,-27,-1,-26,-7,-28,-50,-52,-30,-2,-29,-41,-51,-58,14,14,-63,]),'CHAR_TYPE':([0,3,5,6,7,8,27,28,70,72,105,107,114,116,117,125,129,131,132,134,135,],[15,15,-23,-24,-25,-27,-1,-26,-7,-28,-50,-52,-30,-2,-29,-41,-51,-58,15,15,-63,]),'$end':([1,5,6,7,8,27,28,70,72,105,107,114,116,117,125,129,131,135,],[0,-23,-24,-25,-27,-1,-26,-7,-28,-50,-52,-30,-2,-29,-41,-51,-58,-63,]),'EQUALS':([4,18,33,60,65,67,84,],[22,30,68,91,93,94,104,]),'LBRACKET':([4,18,34,54,57,67,78,],[23,29,69,86,89,95,69,]),'RBRACE':([5,6,7,8,27,28,70,72,105,107,114,116,117,125,129,131,133,134,135,136,],[-23,-24,-25,-27,-1,-26,-7,-28,-50,-52,-30,-2,-29,-41,-51,-58,135,-21,-63,-22,]),'LPAREN':([9,10,11,22,30,43,44,68,71,73,93,],[24,25,26,45,45,45,45,45,45,45,45,]),'SEMICOLON':([16,17,18,19,20,34,35,36,37,38,39,40,41,42,46,47,49,51,52,53,62,63,64,65,66,67,74,75,76,77,78,79,83,85,87,92,96,97,99,100,101,102,118,119,120,124,126,],[27,28,-5,-3,-31,-36,70,72,-43,-13,-12,-14,-45,-15,-47,-48,-36,-37,-38,-39,-6,-34,-4,-5,-32,-33,-16,-12,-13,-14,-46,-17,-49,105,107,114,116,117,-42,-44,-18,-19,-40,-20,125,-35,129,]),'COMMA':([18,19,20,34,37,38,39,40,41,42,46,47,49,51,52,53,55,56,57,58,62,63,65,67,74,75,76,77,78,79,83,92,99,100,101,102,108,118,119,122,124,],[-5,31,32,-36,-43,-13,-12,-14,-45,-15,-47,-48,-36,-37,-38,-39,88,-53,-55,-57,-6,-34,-5,-33,-16,-12,-13,-14,-46,-17,-49,-35,-42,-44,-18,-19,-54,-40,-20,-56,-35,]),'FLOAT':([22,23,30,43,44,45,68,69,71,73,82,93,94,104,],[38,51,38,76,76,81,38,51,76,76,103,76,51,51,]),'INTEGER':([22,23,29,30,43,44,45,68,69,71,73,86,89,90,91,93,94,95,104,],[39,52,61,39,75,75,80,39,52,75,75,106,109,111,113,75,52,115,52,]),'CHAR':([22,23,30,43,44,68,69,71,73,93,94,104,],[40,53,40,77,77,40,53,77,77,77,53,53,]),'BOOL':([22,30,43,44,68,71,73,93,],[42,42,42,42,42,42,42,42,]),'MINUS':([22,30,43,44,45,68,71,73,93,],[43,43,43,43,82,43,43,43,43,]),'PLUS':([22,30,43,44,68,71,73,93,],[44,44,44,44,44,44,44,44,]),'TRUE':([22,30,43,44,68,71,73,93,],[46,46,46,46,46,46,46,46,]),'FALSE':([22,30,43,44,68,71,73,93,],[47,47,47,47,47,47,47,47,]),'NOT':([22,30,43,44,68,71,73,93,],[48,48,48,48,48,48,48,48,]),'STRING':([25,88,],[58,58,]),'AND':([34,37,38,39,40,41,42,46,47,74,75,76,77,78,79,83,99,100,101,102,118,119,],[-46,73,-13,-12,-14,-45,-15,-47,-48,-16,-12,-13,-14,-46,-17,-49,73,-44,-18,-19,-40,-20,]),'OR':([34,35,37,38,39,40,41,42,46,47,62,74,75,76,77,78,79,83,96,99,100,101,102,118,119,],[-46,71,-43,-13,-12,-14,-45,-15,-47,-48,71,-16,-12,-13,-14,-46,-17,-49,71,-42,-44,-18,-19,-40,-20,]),'RBRACKET':([49,50,51,52,53,61,98,106,109,115,],[-36,84,-37,-38,-39,92,118,121,122,124,]),'RPAREN':([54,55,56,57,58,80,81,103,108,121,122,127,128,],[85,87,-53,-55,-57,101,102,119,-54,126,-56,130,-62,]),'COLON':([59,110,111,112,113,],[90,123,-60,-61,-59,]),'LBRACE':([130,],[132,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,132,134,],[1,134,134,]),'type':([0,3,132,134,],[2,21,2,2,]),'simple_assignment':([0,132,134,],[5,5,5,]),'array_declarationTab':([0,132,134,],[6,6,6,]),'array_assignment':([0,132,134,],[7,7,7,]),'const_declarationTab':([0,132,134,],[8,8,8,]),'declaration_list':([2,31,],[16,64,]),'declarationTab_listTab':([2,32,],[17,66,]),'declaration':([2,31,],[19,19,]),'declarationTab':([2,32,],[20,20,]),'expression':([22,30,68,93,],[35,62,96,62,]),'expressionTab':([22,23,30,68,69,94,104,],[36,50,63,97,98,63,120,]),'term':([22,30,68,71,93,],[37,37,37,99,37,]),'factor':([22,30,43,44,68,71,73,93,],[41,41,74,79,41,41,100,41,]),'write_content':([25,],[55,]),'write_item':([25,88,],[56,108,]),'initialisation':([26,],[59,]),'step':([90,],[110,]),'BorneSup':([123,],[127,]),'block':([130,],[131,]),'statements':([132,134,],[133,136,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> type declaration_list SEMICOLON','statement',3,'p_statement_declaration','main.py',186),
  ('statement -> CONST type ID EQUALS expression SEMICOLON','statement',6,'p_statement_declaration','main.py',187),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','main.py',230),
  ('declaration_list -> declaration COMMA declaration_list','declaration_list',3,'p_declaration_list','main.py',231),
  ('declaration -> ID','declaration',1,'p_declaration','main.py',241),
  ('declaration -> ID EQUALS expression','declaration',3,'p_declaration','main.py',242),
  ('statement -> ID EQUALS expression SEMICOLON','statement',4,'p_statement_assignment','main.py',253),
  ('type -> INT_TYPE','type',1,'p_type','main.py',298),
  ('type -> FLOAT_TYPE','type',1,'p_type','main.py',299),
  ('type -> BOOL_TYPE','type',1,'p_type','main.py',300),
  ('type -> CHAR_TYPE','type',1,'p_type','main.py',301),
  ('factor -> INTEGER','factor',1,'p_factor_number','main.py',305),
  ('factor -> FLOAT','factor',1,'p_factor_number','main.py',306),
  ('factor -> CHAR','factor',1,'p_factor_number','main.py',307),
  ('factor -> BOOL','factor',1,'p_factor_number','main.py',308),
  ('factor -> MINUS factor','factor',2,'p_factor_number','main.py',309),
  ('factor -> PLUS factor','factor',2,'p_factor_number','main.py',310),
  ('factor -> LPAREN INTEGER RPAREN','factor',3,'p_factor_number','main.py',311),
  ('factor -> LPAREN FLOAT RPAREN','factor',3,'p_factor_number','main.py',312),
  ('factor -> LPAREN MINUS FLOAT RPAREN','factor',4,'p_factor_number','main.py',313),
  ('statements -> statement','statements',1,'p_statements','main.py',334),
  ('statements -> statement statements','statements',2,'p_statements','main.py',335),
  ('statement -> simple_assignment','statement',1,'p_statement','main.py',342),
  ('statement -> array_declarationTab','statement',1,'p_statement','main.py',343),
  ('statement -> array_assignment','statement',1,'p_statement','main.py',344),
  ('statement -> type declarationTab_listTab SEMICOLON','statement',3,'p_statement','main.py',345),
  ('statement -> const_declarationTab','statement',1,'p_statement','main.py',346),
  ('simple_assignment -> ID EQUALS expressionTab SEMICOLON','simple_assignment',4,'p_simple_assignment','main.py',349),
  ('const_declarationTab -> CONST type ID EQUALS expressionTab SEMICOLON','const_declarationTab',6,'p_const_declarationTab','main.py',365),
  ('array_declarationTab -> type ID LBRACKET INTEGER RBRACKET SEMICOLON','array_declarationTab',6,'p_array_declarationTab','main.py',372),
  ('declarationTab_listTab -> declarationTab','declarationTab_listTab',1,'p_declarationTab_listTab','main.py',385),
  ('declarationTab_listTab -> declarationTab COMMA declarationTab_listTab','declarationTab_listTab',3,'p_declarationTab_listTab','main.py',386),
  ('declarationTab -> ID','declarationTab',1,'p_declarationTab','main.py',393),
  ('declarationTab -> ID EQUALS expressionTab','declarationTab',3,'p_declarationTab','main.py',394),
  ('declarationTab -> ID LBRACKET INTEGER RBRACKET','declarationTab',4,'p_declarationTab','main.py',395),
  ('expressionTab -> ID','expressionTab',1,'p_expressionTab','main.py',408),
  ('expressionTab -> FLOAT','expressionTab',1,'p_expressionTab','main.py',409),
  ('expressionTab -> INTEGER','expressionTab',1,'p_expressionTab','main.py',410),
  ('expressionTab -> CHAR','expressionTab',1,'p_expressionTab','main.py',411),
  ('factor -> ID LBRACKET expressionTab RBRACKET','factor',4,'p_array_access','main.py',416),
  ('array_assignment -> ID LBRACKET expressionTab RBRACKET EQUALS expressionTab SEMICOLON','array_assignment',7,'p_array_assignment','main.py',443),
  ('expression -> expression OR term','expression',3,'p_expression_el','main.py',501),
  ('expression -> term','expression',1,'p_expression_el','main.py',502),
  ('term -> term AND factor','term',3,'p_term_tl','main.py',519),
  ('term -> factor','term',1,'p_term_tl','main.py',520),
  ('factor -> ID','factor',1,'p_factor_fl','main.py',540),
  ('factor -> TRUE','factor',1,'p_factor_fl','main.py',541),
  ('factor -> FALSE','factor',1,'p_factor_fl','main.py',542),
  ('factor -> NOT ID','factor',2,'p_factor_fl','main.py',543),
  ('statement -> READ LPAREN ID RPAREN SEMICOLON','statement',5,'p_read_statement','main.py',665),
  ('statement -> READ LPAREN ID LBRACKET INTEGER RBRACKET RPAREN SEMICOLON','statement',8,'p_read_statement','main.py',666),
  ('statement -> WRITE LPAREN write_content RPAREN SEMICOLON','statement',5,'p_write_statement','main.py',742),
  ('write_content -> write_item','write_content',1,'p_write_content_single','main.py',747),
  ('write_content -> write_content COMMA write_item','write_content',3,'p_write_content_multiple','main.py',751),
  ('write_item -> ID','write_item',1,'p_write_item','main.py',755),
  ('write_item -> ID LBRACKET INTEGER RBRACKET','write_item',4,'p_write_item','main.py',756),
  ('write_item -> STRING','write_item',1,'p_write_item','main.py',757),
  ('statement -> FOR LPAREN initialisation COLON step COLON BorneSup RPAREN block','statement',9,'p_statement_FORloop','main.py',781),
  ('initialisation -> ID EQUALS INTEGER','initialisation',3,'p_initialisation','main.py',787),
  ('step -> INTEGER','step',1,'p_step','main.py',796),
  ('step -> ID','step',1,'p_step','main.py',797),
  ('BorneSup -> ID','BorneSup',1,'p_BorneSup','main.py',805),
  ('block -> LBRACE statements RBRACE','block',3,'p_block','main.py',810),
]
