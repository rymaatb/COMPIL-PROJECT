
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BOOL BOOL_TYPE CHAR CHAR_TYPE COLON COMMA COMMENT CONST DECLARATION DIVIDE ELSE EQ EQUALS FLOAT FLOAT_TYPE FOR GT GTE ID IF INSTRUCTION INT INT_TYPE LBRACE LPAREN LT LTE MINUS MULTIPLY NEQ NOT NUMBER OR PLUS RBRACE RPAREN SEMICOLON VAR_GLOBALstatement : type declaration_list SEMICOLON\n                 | CONST type ID EQUALS expression SEMICOLONdeclaration_list : declaration\n                        | declaration COMMA declaration_listdeclaration : ID\n                   | ID EQUALS expressiontype : INT_TYPE\n            | FLOAT_TYPE\n            | BOOL_TYPE\n            | CHAR_TYPEfactor : INT\n              | FLOAT\n              | CHAR\n              | BOOLexpression : expression PLUS term\n                  | expression MINUS term\n       term       : term MULTIPLY factor\n                  | term DIVIDE factorstatement : ID EQUALS expression SEMICOLONexpression : termterm : factorfactor : NUMBERexpression : expression OR expressionexpression :  expression  AND expression  expression : expression EQ expression\n                  | expression NEQ expression\n                  | expression LT expression\n                  | expression GT expression\n                  | expression LTE expression\n                  | expression GTE expressionexpression : NOT expressioncomparison : LPAREN expression RPARENcomparison : NUMBERfactor : comparisonfactor : ID'
    
_lr_action_items = {'CONST':([0,],[3,]),'ID':([0,2,5,6,7,8,12,13,15,16,21,29,32,34,35,36,37,38,39,40,41,42,43,44,45,],[4,11,-7,-8,-9,-10,17,18,11,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'INT_TYPE':([0,3,],[5,5,]),'FLOAT_TYPE':([0,3,],[6,6,]),'BOOL_TYPE':([0,3,],[7,7,]),'CHAR_TYPE':([0,3,],[8,8,]),'$end':([1,14,33,62,],[0,-1,-19,-2,]),'EQUALS':([4,11,17,],[13,16,32,]),'SEMICOLON':([9,10,11,18,19,20,22,23,24,25,26,27,28,30,31,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,],[14,-3,-5,-35,33,-20,-21,-11,-12,-13,-14,-22,-34,-4,-6,-31,62,-15,-16,-23,-24,-25,-26,-27,-28,-29,-30,-17,-18,-32,]),'COMMA':([10,11,18,20,22,23,24,25,26,27,28,31,46,49,50,51,52,53,54,55,56,57,58,59,60,61,],[15,-5,-35,-20,-21,-11,-12,-13,-14,-22,-34,-6,-31,-15,-16,-23,-24,-25,-26,-27,-28,-29,-30,-17,-18,-32,]),'NOT':([13,16,21,29,32,36,37,38,39,40,41,42,43,],[21,21,21,21,21,21,21,21,21,21,21,21,21,]),'INT':([13,16,21,29,32,34,35,36,37,38,39,40,41,42,43,44,45,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'FLOAT':([13,16,21,29,32,34,35,36,37,38,39,40,41,42,43,44,45,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'CHAR':([13,16,21,29,32,34,35,36,37,38,39,40,41,42,43,44,45,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'BOOL':([13,16,21,29,32,34,35,36,37,38,39,40,41,42,43,44,45,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'NUMBER':([13,16,21,29,32,34,35,36,37,38,39,40,41,42,43,44,45,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'LPAREN':([13,16,21,29,32,34,35,36,37,38,39,40,41,42,43,44,45,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'MULTIPLY':([18,20,22,23,24,25,26,27,28,49,50,59,60,61,],[-35,44,-21,-11,-12,-13,-14,-22,-34,44,44,-17,-18,-32,]),'DIVIDE':([18,20,22,23,24,25,26,27,28,49,50,59,60,61,],[-35,45,-21,-11,-12,-13,-14,-22,-34,45,45,-17,-18,-32,]),'PLUS':([18,19,20,22,23,24,25,26,27,28,31,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,],[-35,34,-20,-21,-11,-12,-13,-14,-22,-34,34,34,34,34,-15,-16,34,34,34,34,34,34,34,34,-17,-18,-32,]),'MINUS':([18,19,20,22,23,24,25,26,27,28,31,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,],[-35,35,-20,-21,-11,-12,-13,-14,-22,-34,35,35,35,35,-15,-16,35,35,35,35,35,35,35,35,-17,-18,-32,]),'OR':([18,19,20,22,23,24,25,26,27,28,31,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,],[-35,36,-20,-21,-11,-12,-13,-14,-22,-34,36,36,36,36,-15,-16,36,36,36,36,36,36,36,36,-17,-18,-32,]),'AND':([18,19,20,22,23,24,25,26,27,28,31,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,],[-35,37,-20,-21,-11,-12,-13,-14,-22,-34,37,37,37,37,-15,-16,37,37,37,37,37,37,37,37,-17,-18,-32,]),'EQ':([18,19,20,22,23,24,25,26,27,28,31,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,],[-35,38,-20,-21,-11,-12,-13,-14,-22,-34,38,38,38,38,-15,-16,38,38,38,38,38,38,38,38,-17,-18,-32,]),'NEQ':([18,19,20,22,23,24,25,26,27,28,31,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,],[-35,39,-20,-21,-11,-12,-13,-14,-22,-34,39,39,39,39,-15,-16,39,39,39,39,39,39,39,39,-17,-18,-32,]),'LT':([18,19,20,22,23,24,25,26,27,28,31,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,],[-35,40,-20,-21,-11,-12,-13,-14,-22,-34,40,40,40,40,-15,-16,40,40,40,40,40,40,40,40,-17,-18,-32,]),'GT':([18,19,20,22,23,24,25,26,27,28,31,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,],[-35,41,-20,-21,-11,-12,-13,-14,-22,-34,41,41,41,41,-15,-16,41,41,41,41,41,41,41,41,-17,-18,-32,]),'LTE':([18,19,20,22,23,24,25,26,27,28,31,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,],[-35,42,-20,-21,-11,-12,-13,-14,-22,-34,42,42,42,42,-15,-16,42,42,42,42,42,42,42,42,-17,-18,-32,]),'GTE':([18,19,20,22,23,24,25,26,27,28,31,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,],[-35,43,-20,-21,-11,-12,-13,-14,-22,-34,43,43,43,43,-15,-16,43,43,43,43,43,43,43,43,-17,-18,-32,]),'RPAREN':([18,20,22,23,24,25,26,27,28,46,47,49,50,51,52,53,54,55,56,57,58,59,60,61,],[-35,-20,-21,-11,-12,-13,-14,-22,-34,-31,61,-15,-16,-23,-24,-25,-26,-27,-28,-29,-30,-17,-18,-32,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'type':([0,3,],[2,12,]),'declaration_list':([2,15,],[9,30,]),'declaration':([2,15,],[10,10,]),'expression':([13,16,21,29,32,36,37,38,39,40,41,42,43,],[19,31,46,47,48,51,52,53,54,55,56,57,58,]),'term':([13,16,21,29,32,34,35,36,37,38,39,40,41,42,43,],[20,20,20,20,20,49,50,20,20,20,20,20,20,20,20,]),'factor':([13,16,21,29,32,34,35,36,37,38,39,40,41,42,43,44,45,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,59,60,]),'comparison':([13,16,21,29,32,34,35,36,37,38,39,40,41,42,43,44,45,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> type declaration_list SEMICOLON','statement',3,'p_statement_declaration','compiler.py',136),
  ('statement -> CONST type ID EQUALS expression SEMICOLON','statement',6,'p_statement_declaration','compiler.py',137),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','compiler.py',154),
  ('declaration_list -> declaration COMMA declaration_list','declaration_list',3,'p_declaration_list','compiler.py',155),
  ('declaration -> ID','declaration',1,'p_declaration','compiler.py',165),
  ('declaration -> ID EQUALS expression','declaration',3,'p_declaration','compiler.py',166),
  ('type -> INT_TYPE','type',1,'p_type','compiler.py',182),
  ('type -> FLOAT_TYPE','type',1,'p_type','compiler.py',183),
  ('type -> BOOL_TYPE','type',1,'p_type','compiler.py',184),
  ('type -> CHAR_TYPE','type',1,'p_type','compiler.py',185),
  ('factor -> INT','factor',1,'p_factor_number','compiler.py',195),
  ('factor -> FLOAT','factor',1,'p_factor_number','compiler.py',196),
  ('factor -> CHAR','factor',1,'p_factor_number','compiler.py',197),
  ('factor -> BOOL','factor',1,'p_factor_number','compiler.py',198),
  ('expression -> expression PLUS term','expression',3,'p_binary_operators','compiler.py',221),
  ('expression -> expression MINUS term','expression',3,'p_binary_operators','compiler.py',222),
  ('term -> term MULTIPLY factor','term',3,'p_binary_operators','compiler.py',223),
  ('term -> term DIVIDE factor','term',3,'p_binary_operators','compiler.py',224),
  ('statement -> ID EQUALS expression SEMICOLON','statement',4,'p_statement_assignment','compiler.py',239),
  ('expression -> term','expression',1,'p_expression_term','compiler.py',251),
  ('term -> factor','term',1,'p_term_factor','compiler.py',256),
  ('factor -> NUMBER','factor',1,'p_factor_num','compiler.py',261),
  ('expression -> expression OR expression','expression',3,'p_expression_or','compiler.py',278),
  ('expression -> expression AND expression','expression',3,'p_expression_and','compiler.py',283),
  ('expression -> expression EQ expression','expression',3,'p_expression_comparison','compiler.py',288),
  ('expression -> expression NEQ expression','expression',3,'p_expression_comparison','compiler.py',289),
  ('expression -> expression LT expression','expression',3,'p_expression_comparison','compiler.py',290),
  ('expression -> expression GT expression','expression',3,'p_expression_comparison','compiler.py',291),
  ('expression -> expression LTE expression','expression',3,'p_expression_comparison','compiler.py',292),
  ('expression -> expression GTE expression','expression',3,'p_expression_comparison','compiler.py',293),
  ('expression -> NOT expression','expression',2,'p_expression_not','compiler.py',308),
  ('comparison -> LPAREN expression RPAREN','comparison',3,'p_comparison_expr','compiler.py',313),
  ('comparison -> NUMBER','comparison',1,'p_comparison_number','compiler.py',318),
  ('factor -> comparison','factor',1,'p_factor_comparison','compiler.py',323),
  ('factor -> ID','factor',1,'p_factor_id','compiler.py',331),
]
