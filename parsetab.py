
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDECOLON DIVIDE ELSE EQ EQ_EQ FOR GE GT ID IF LBRACE LE LPAREN LT MINUS NE NUMBER PLUS RBRACE RPAREN SEMI TIMESstatement : ID EQ expression SEMIstatement : IF LPAREN condition RPAREN LBRACE statement RBRACE\n                 | IF LPAREN condition RPAREN LBRACE statement RBRACE ELSE LBRACE statement RBRACEstatement : FOR LPAREN statement COLON expression COLON condition RBRACE statement RBRACEcondition : expression GT expression\n                 | expression LT expression\n                 | expression GE expression\n                 | expression LE expression\n                 | expression EQ_EQ expression\n                 | expression NE expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expressionexpression : LPAREN expression RPARENexpression : NUMBERexpression : ID'
    
_lr_action_items = {'ID':([0,5,6,7,10,16,17,18,19,22,23,24,25,26,27,28,34,43,47,48,],[2,8,8,2,8,8,8,8,8,8,8,8,8,8,8,8,2,8,2,2,]),'IF':([0,7,34,47,48,],[3,3,3,3,3,]),'FOR':([0,7,34,47,48,],[4,4,4,4,4,]),'$end':([1,15,44,51,52,],[0,-1,-2,-4,-3,]),'EQ':([2,],[5,]),'LPAREN':([3,4,5,6,10,16,17,18,19,22,23,24,25,26,27,28,43,],[6,7,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'NUMBER':([5,6,10,16,17,18,19,22,23,24,25,26,27,28,43,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'SEMI':([8,9,11,29,30,31,32,33,],[-17,15,-16,-11,-12,-13,-14,-15,]),'PLUS':([8,9,11,13,20,29,30,31,32,33,35,36,37,38,39,40,41,],[-17,16,-16,16,16,-11,-12,-13,-14,-15,16,16,16,16,16,16,16,]),'MINUS':([8,9,11,13,20,29,30,31,32,33,35,36,37,38,39,40,41,],[-17,17,-16,17,17,-11,-12,-13,-14,-15,17,17,17,17,17,17,17,]),'TIMES':([8,9,11,13,20,29,30,31,32,33,35,36,37,38,39,40,41,],[-17,18,-16,18,18,18,18,-13,-14,-15,18,18,18,18,18,18,18,]),'DIVIDE':([8,9,11,13,20,29,30,31,32,33,35,36,37,38,39,40,41,],[-17,19,-16,19,19,19,19,-13,-14,-15,19,19,19,19,19,19,19,]),'GT':([8,11,13,29,30,31,32,33,],[-17,-16,22,-11,-12,-13,-14,-15,]),'LT':([8,11,13,29,30,31,32,33,],[-17,-16,23,-11,-12,-13,-14,-15,]),'GE':([8,11,13,29,30,31,32,33,],[-17,-16,24,-11,-12,-13,-14,-15,]),'LE':([8,11,13,29,30,31,32,33,],[-17,-16,25,-11,-12,-13,-14,-15,]),'EQ_EQ':([8,11,13,29,30,31,32,33,],[-17,-16,26,-11,-12,-13,-14,-15,]),'NE':([8,11,13,29,30,31,32,33,],[-17,-16,27,-11,-12,-13,-14,-15,]),'RPAREN':([8,11,12,20,29,30,31,32,33,35,36,37,38,39,40,],[-17,-16,21,33,-11,-12,-13,-14,-15,-5,-6,-7,-8,-9,-10,]),'RBRACE':([8,11,15,29,30,31,32,33,35,36,37,38,39,40,42,44,45,49,50,51,52,],[-17,-16,-1,-11,-12,-13,-14,-15,-5,-6,-7,-8,-9,-10,44,-2,47,51,52,-4,-3,]),'COLON':([8,11,14,15,29,30,31,32,33,41,44,51,52,],[-17,-16,28,-1,-11,-12,-13,-14,-15,43,-2,-4,-3,]),'LBRACE':([21,46,],[34,48,]),'ELSE':([44,],[46,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,7,34,47,48,],[1,14,42,49,50,]),'expression':([5,6,10,16,17,18,19,22,23,24,25,26,27,28,43,],[9,13,20,29,30,31,32,35,36,37,38,39,40,41,13,]),'condition':([6,43,],[12,45,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> ID EQ expression SEMI','statement',4,'p_statement_assign','lexer.py',73),
  ('statement -> IF LPAREN condition RPAREN LBRACE statement RBRACE','statement',7,'p_statement_if','lexer.py',79),
  ('statement -> IF LPAREN condition RPAREN LBRACE statement RBRACE ELSE LBRACE statement RBRACE','statement',11,'p_statement_if','lexer.py',80),
  ('statement -> FOR LPAREN statement COLON expression COLON condition RBRACE statement RBRACE','statement',10,'p_statement_for','lexer.py',89),
  ('condition -> expression GT expression','condition',3,'p_condition','lexer.py',100),
  ('condition -> expression LT expression','condition',3,'p_condition','lexer.py',101),
  ('condition -> expression GE expression','condition',3,'p_condition','lexer.py',102),
  ('condition -> expression LE expression','condition',3,'p_condition','lexer.py',103),
  ('condition -> expression EQ_EQ expression','condition',3,'p_condition','lexer.py',104),
  ('condition -> expression NE expression','condition',3,'p_condition','lexer.py',105),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','lexer.py',121),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','lexer.py',122),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','lexer.py',123),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','lexer.py',124),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','lexer.py',136),
  ('expression -> NUMBER','expression',1,'p_expression_number','lexer.py',141),
  ('expression -> ID','expression',1,'p_expression_id','lexer.py',146),
]
