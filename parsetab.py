
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BOOL BOOL_TYPE CHAR CHAR_TYPE COLON COMMA COMMENT CONST DECLARATION DIVIDE ELSE EQ EQUALS FLOAT FLOAT_TYPE FOR GT GTE ID IF INSTRUCTION INT INT_TYPE LBRACE LBRACKET LPAREN LT LTE MINUS MULTIPLY NEQ NOT NUMBER OR PLUS RBRACE RBRACKET READ RPAREN SEMICOLON VAR_GLOBAL WRITEstatement : type declaration_list SEMICOLON\n                 | CONST type ID EQUALS expression SEMICOLONdeclaration_list : declaration\n                        | declaration COMMA declaration_listdeclaration : ID\n                   | ID EQUALS expression\n                   | ID LBRACKET NUMBER RBRACKETexpression : ID\n                  | FLOAT\n                  | INT\n                  | CHARtype : INT_TYPE\n            | FLOAT_TYPE\n            | BOOL_TYPE\n            | CHAR_TYPEdeclaration : type ID LBRACKET NUMBER RBRACKET SEMICOLONstatement : ID LBRACKET expression RBRACKET EQUALS expression SEMICOLONfactor : ID LBRACKET expression RBRACKETstatement : READ LPAREN ID RPAREN SEMICOLONstatement : WRITE LPAREN write_content RPAREN SEMICOLONwrite_content : write_itemwrite_content : write_content COMMA write_itemwrite_item : ID\n                  | ID LBRACKET NUMBER RBRACKET'
    
_lr_action_items = {'CONST':([0,],[3,]),'ID':([0,2,7,8,9,10,11,15,16,17,18,21,22,38,42,47,],[4,14,-12,-13,-14,-15,19,24,25,30,33,14,25,25,33,25,]),'READ':([0,],[5,]),'WRITE':([0,],[6,]),'INT_TYPE':([0,2,3,7,8,9,10,21,],[7,7,7,-12,-13,-14,-15,7,]),'FLOAT_TYPE':([0,2,3,7,8,9,10,21,],[8,8,8,-12,-13,-14,-15,8,]),'BOOL_TYPE':([0,2,3,7,8,9,10,21,],[9,9,9,-12,-13,-14,-15,9,]),'CHAR_TYPE':([0,2,3,7,8,9,10,21,],[10,10,10,-12,-13,-14,-15,10,]),'$end':([1,20,48,49,53,57,],[0,-1,-19,-20,-2,-17,]),'LBRACKET':([4,14,19,33,],[16,23,34,43,]),'LPAREN':([5,6,],[17,18,]),'SEMICOLON':([12,13,14,25,27,28,29,35,36,40,41,45,46,52,54,56,],[20,-3,-5,-8,-9,-10,-11,-4,-6,48,49,-7,53,56,57,-16,]),'COMMA':([13,14,25,27,28,29,31,32,33,36,45,50,55,56,],[21,-5,-8,-9,-10,-11,42,-21,-23,-6,-7,-22,-24,-16,]),'EQUALS':([14,24,39,],[22,38,47,]),'FLOAT':([16,22,38,47,],[27,27,27,27,]),'INT':([16,22,38,47,],[28,28,28,28,]),'CHAR':([16,22,38,47,],[29,29,29,29,]),'NUMBER':([23,34,43,],[37,44,51,]),'RBRACKET':([25,26,27,28,29,37,44,51,],[-8,39,-9,-10,-11,45,52,55,]),'RPAREN':([30,31,32,33,50,55,],[40,41,-21,-23,-22,-24,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'type':([0,2,3,21,],[2,11,15,11,]),'declaration_list':([2,21,],[12,35,]),'declaration':([2,21,],[13,13,]),'expression':([16,22,38,47,],[26,36,46,54,]),'write_content':([18,],[31,]),'write_item':([18,42,],[32,50,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> type declaration_list SEMICOLON','statement',3,'p_statement_declaration','compiler.py',141),
  ('statement -> CONST type ID EQUALS expression SEMICOLON','statement',6,'p_statement_declaration','compiler.py',142),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','compiler.py',159),
  ('declaration_list -> declaration COMMA declaration_list','declaration_list',3,'p_declaration_list','compiler.py',160),
  ('declaration -> ID','declaration',1,'p_declaration','compiler.py',167),
  ('declaration -> ID EQUALS expression','declaration',3,'p_declaration','compiler.py',168),
  ('declaration -> ID LBRACKET NUMBER RBRACKET','declaration',4,'p_declaration','compiler.py',169),
  ('expression -> ID','expression',1,'p_expression','compiler.py',181),
  ('expression -> FLOAT','expression',1,'p_expression','compiler.py',182),
  ('expression -> INT','expression',1,'p_expression','compiler.py',183),
  ('expression -> CHAR','expression',1,'p_expression','compiler.py',184),
  ('type -> INT_TYPE','type',1,'p_type','compiler.py',204),
  ('type -> FLOAT_TYPE','type',1,'p_type','compiler.py',205),
  ('type -> BOOL_TYPE','type',1,'p_type','compiler.py',206),
  ('type -> CHAR_TYPE','type',1,'p_type','compiler.py',207),
  ('declaration -> type ID LBRACKET NUMBER RBRACKET SEMICOLON','declaration',6,'p_array_declaration','compiler.py',211),
  ('statement -> ID LBRACKET expression RBRACKET EQUALS expression SEMICOLON','statement',7,'p_array_assignment','compiler.py',220),
  ('factor -> ID LBRACKET expression RBRACKET','factor',4,'p_array_access','compiler.py',234),
  ('statement -> READ LPAREN ID RPAREN SEMICOLON','statement',5,'p_read_statement','compiler.py',250),
  ('statement -> WRITE LPAREN write_content RPAREN SEMICOLON','statement',5,'p_write_statement','compiler.py',266),
  ('write_content -> write_item','write_content',1,'p_write_content_single','compiler.py',272),
  ('write_content -> write_content COMMA write_item','write_content',3,'p_write_content_multiple','compiler.py',276),
  ('write_item -> ID','write_item',1,'p_write_item','compiler.py',280),
  ('write_item -> ID LBRACKET NUMBER RBRACKET','write_item',4,'p_write_item','compiler.py',281),
]
