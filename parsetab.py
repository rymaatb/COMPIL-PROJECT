
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BOOL BOOL_TYPE CHAR CHAR_TYPE COLON COMMA COMMENT CONST DECLARATION DIVIDE ELSE EQ EQUALS FALSE FLOAT FLOAT_TYPE FOR GT GTE ID IF INSTRUCTION INTEGER INT_TYPE LBRACE LBRACKET LPAREN LT LTE MINUS MULTIPLY NEQ NOT NUMBER OR PLUS RBRACE RBRACKET READ RPAREN SEMICOLON TRUE VAR_GLOBAL WRITEstatement : type declaration_list SEMICOLON\n                 | CONST type ID EQUALS expression SEMICOLONdeclaration_list : declaration\n                        | declaration COMMA declaration_listdeclaration : ID\n                   | ID EQUALS expressionstatement : ID EQUALS expression SEMICOLONtype : INT_TYPE\n            | FLOAT_TYPE\n            | BOOL_TYPE\n            | CHAR_TYPEfactor : INTEGER\n              | FLOAT\n              | CHAR\n              | BOOL\n              | MINUS factor\n              | PLUS factor\n              | LPAREN INTEGER RPAREN\n              | LPAREN FLOAT RPAREN\n              | LPAREN MINUS FLOAT RPAREN\n              statements : statement\n                  | statement statements statement : simple_assignment\n                 | array_declarationTab\n                 | declaration_assignment \n                 | array_assignment\n                 | type declarationTab_listTab SEMICOLON\n                 | const_declarationTabconst_declarationTab : CONST type ID EQUALS expressionTab SEMICOLONarray_declarationTab : type ID LBRACKET INTEGER RBRACKET SEMICOLONdeclarationTab_listTab : declarationTab\n                        | declarationTab COMMA declarationTab_listTabdeclarationTab : ID\n                   | ID EQUALS expressionTab\n                   | ID LBRACKET INTEGER RBRACKETexpressionTab : ID\n                  | FLOAT\n                  | INTEGER\n                  | CHARfactor : ID LBRACKET expression RBRACKETarray_assignment : ID LBRACKET expressionTab RBRACKET EQUALS expressionTab SEMICOLONdeclaration_assignment : type ID EQUALS expression SEMICOLONsimple_assignment : ID EQUALS expression SEMICOLONexpression : expression OR term\n                  | termterm : term AND factor \n            | factorfactor : ID\n              | TRUE\n              | FALSE\n              | NOT IDstatement : READ LPAREN ID RPAREN SEMICOLON\n                 | READ LPAREN ID LBRACKET INTEGER RBRACKET RPAREN SEMICOLONstatement : WRITE LPAREN write_content RPAREN SEMICOLONwrite_content : write_itemwrite_content : write_content COMMA write_itemwrite_item : ID\n                  | ID LBRACKET INTEGER RBRACKETstatement : FOR LPAREN initialisation COLON step COLON BorneSup RPAREN block initialisation : ID EQUALS INTEGERstep : INTEGER\n            | IDBorneSup : IDblock : LBRACE statements RBRACE'
    
_lr_action_items = {'CONST':([0,5,6,7,8,9,28,29,73,91,104,106,113,116,117,125,129,131,132,134,135,],[3,-23,-24,-25,-26,-28,-1,-27,-7,-42,-52,-54,-30,-2,-29,-41,-53,-59,3,3,-64,]),'ID':([0,2,5,6,7,8,9,13,14,15,16,22,23,24,25,26,27,28,29,31,32,33,43,44,48,71,72,73,74,75,86,88,91,92,93,103,104,106,113,116,117,123,125,129,131,132,134,135,],[4,19,-23,-24,-25,-26,-28,-8,-9,-10,-11,34,35,49,54,57,59,-1,-27,61,68,70,35,35,81,61,35,-7,35,35,57,111,-42,35,49,49,-52,-54,-30,-2,-29,128,-41,-53,-59,4,4,-64,]),'READ':([0,5,6,7,8,9,28,29,73,91,104,106,113,116,117,125,129,131,132,134,135,],[10,-23,-24,-25,-26,-28,-1,-27,-7,-42,-52,-54,-30,-2,-29,-41,-53,-59,10,10,-64,]),'WRITE':([0,5,6,7,8,9,28,29,73,91,104,106,113,116,117,125,129,131,132,134,135,],[11,-23,-24,-25,-26,-28,-1,-27,-7,-42,-52,-54,-30,-2,-29,-41,-53,-59,11,11,-64,]),'FOR':([0,5,6,7,8,9,28,29,73,91,104,106,113,116,117,125,129,131,132,134,135,],[12,-23,-24,-25,-26,-28,-1,-27,-7,-42,-52,-54,-30,-2,-29,-41,-53,-59,12,12,-64,]),'INT_TYPE':([0,3,5,6,7,8,9,28,29,73,91,104,106,113,116,117,125,129,131,132,134,135,],[13,13,-23,-24,-25,-26,-28,-1,-27,-7,-42,-52,-54,-30,-2,-29,-41,-53,-59,13,13,-64,]),'FLOAT_TYPE':([0,3,5,6,7,8,9,28,29,73,91,104,106,113,116,117,125,129,131,132,134,135,],[14,14,-23,-24,-25,-26,-28,-1,-27,-7,-42,-52,-54,-30,-2,-29,-41,-53,-59,14,14,-64,]),'BOOL_TYPE':([0,3,5,6,7,8,9,28,29,73,91,104,106,113,116,117,125,129,131,132,134,135,],[15,15,-23,-24,-25,-26,-28,-1,-27,-7,-42,-52,-54,-30,-2,-29,-41,-53,-59,15,15,-64,]),'CHAR_TYPE':([0,3,5,6,7,8,9,28,29,73,91,104,106,113,116,117,125,129,131,132,134,135,],[16,16,-23,-24,-25,-26,-28,-1,-27,-7,-42,-52,-54,-30,-2,-29,-41,-53,-59,16,16,-64,]),'$end':([1,5,6,7,8,9,28,29,73,91,104,106,113,116,117,125,129,131,135,],[0,-23,-24,-25,-26,-28,-1,-27,-7,-42,-52,-54,-30,-2,-29,-41,-53,-59,-64,]),'EQUALS':([4,19,34,59,68,70,82,],[23,31,71,89,92,93,103,]),'LBRACKET':([4,19,35,54,57,61,70,],[24,30,72,84,87,72,94,]),'RBRACE':([5,6,7,8,9,28,29,73,91,104,106,113,116,117,125,129,131,133,134,135,136,],[-23,-24,-25,-26,-28,-1,-27,-7,-42,-52,-54,-30,-2,-29,-41,-53,-59,135,-21,-64,-22,]),'LPAREN':([10,11,12,23,31,43,44,71,72,74,75,92,],[25,26,27,45,45,45,45,45,45,45,45,45,]),'SEMICOLON':([17,18,19,20,21,35,36,37,38,39,40,41,42,46,47,49,51,52,53,61,62,63,64,65,66,67,68,69,70,76,77,81,83,85,90,95,96,98,99,100,101,114,118,119,120,124,126,],[28,29,-5,-3,-31,-48,73,-45,-47,-12,-13,-14,-15,-49,-50,-36,-37,-38,-39,-36,91,-34,-13,-12,-14,-4,-5,-32,-33,-16,-17,-51,104,106,113,116,117,-44,-46,-18,-19,-6,-40,-20,125,-35,129,]),'COMMA':([19,20,21,35,37,38,39,40,41,42,46,47,49,51,52,53,55,56,57,61,62,63,64,65,66,68,70,76,77,81,90,98,99,100,101,107,114,118,119,122,124,],[-5,32,33,-48,-45,-47,-12,-13,-14,-15,-49,-50,-36,-37,-38,-39,86,-55,-57,-36,-6,-34,-13,-12,-14,-5,-33,-16,-17,-51,-35,-44,-46,-18,-19,-56,-6,-40,-20,-58,-35,]),'INTEGER':([23,24,30,31,43,44,45,71,72,74,75,84,87,88,89,92,93,94,103,],[39,52,60,65,39,39,78,65,39,39,39,105,108,110,112,39,52,115,52,]),'FLOAT':([23,24,31,43,44,45,71,72,74,75,80,92,93,103,],[40,51,64,40,40,79,64,40,40,40,102,40,51,51,]),'CHAR':([23,24,31,43,44,71,72,74,75,92,93,103,],[41,53,66,41,41,66,41,41,41,41,53,53,]),'BOOL':([23,31,43,44,71,72,74,75,92,],[42,42,42,42,42,42,42,42,42,]),'MINUS':([23,31,43,44,45,71,72,74,75,92,],[43,43,43,43,80,43,43,43,43,43,]),'PLUS':([23,31,43,44,71,72,74,75,92,],[44,44,44,44,44,44,44,44,44,]),'TRUE':([23,31,43,44,71,72,74,75,92,],[46,46,46,46,46,46,46,46,46,]),'FALSE':([23,31,43,44,71,72,74,75,92,],[47,47,47,47,47,47,47,47,47,]),'NOT':([23,31,43,44,71,72,74,75,92,],[48,48,48,48,48,48,48,48,48,]),'AND':([35,37,38,39,40,41,42,46,47,61,64,65,66,76,77,81,98,99,100,101,118,119,],[-48,75,-47,-12,-13,-14,-15,-49,-50,-48,-13,-12,-14,-16,-17,-51,75,-46,-18,-19,-40,-20,]),'OR':([35,36,37,38,39,40,41,42,46,47,61,62,64,65,66,76,77,81,95,97,98,99,100,101,114,118,119,],[-48,74,-45,-47,-12,-13,-14,-15,-49,-50,-48,74,-13,-12,-14,-16,-17,-51,74,74,-44,-46,-18,-19,74,-40,-20,]),'RBRACKET':([35,37,38,39,40,41,42,46,47,49,50,51,52,53,60,76,77,81,97,98,99,100,101,105,108,115,118,119,],[-48,-45,-47,-12,-13,-14,-15,-49,-50,-36,82,-37,-38,-39,90,-16,-17,-51,118,-44,-46,-18,-19,121,122,124,-40,-20,]),'RPAREN':([54,55,56,57,78,79,102,107,121,122,127,128,],[83,85,-55,-57,100,101,119,-56,126,-58,130,-63,]),'COLON':([58,109,110,111,112,],[88,123,-61,-62,-60,]),'LBRACE':([130,],[132,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,132,134,],[1,134,134,]),'type':([0,3,132,134,],[2,22,2,2,]),'simple_assignment':([0,132,134,],[5,5,5,]),'array_declarationTab':([0,132,134,],[6,6,6,]),'declaration_assignment':([0,132,134,],[7,7,7,]),'array_assignment':([0,132,134,],[8,8,8,]),'const_declarationTab':([0,132,134,],[9,9,9,]),'declaration_list':([2,32,],[17,67,]),'declarationTab_listTab':([2,33,],[18,69,]),'declaration':([2,32,],[20,20,]),'declarationTab':([2,33,],[21,21,]),'expression':([23,31,71,72,92,],[36,62,95,97,114,]),'term':([23,31,71,72,74,92,],[37,37,37,37,98,37,]),'factor':([23,31,43,44,71,72,74,75,92,],[38,38,76,77,38,38,38,99,38,]),'expressionTab':([24,31,71,93,103,],[50,63,96,63,120,]),'write_content':([26,],[55,]),'write_item':([26,86,],[56,107,]),'initialisation':([27,],[58,]),'step':([88,],[109,]),'BorneSup':([123,],[127,]),'block':([130,],[131,]),'statements':([132,134,],[133,136,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> type declaration_list SEMICOLON','statement',3,'p_statement_declaration','main.py',184),
  ('statement -> CONST type ID EQUALS expression SEMICOLON','statement',6,'p_statement_declaration','main.py',185),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','main.py',223),
  ('declaration_list -> declaration COMMA declaration_list','declaration_list',3,'p_declaration_list','main.py',224),
  ('declaration -> ID','declaration',1,'p_declaration','main.py',234),
  ('declaration -> ID EQUALS expression','declaration',3,'p_declaration','main.py',235),
  ('statement -> ID EQUALS expression SEMICOLON','statement',4,'p_statement_assignment','main.py',246),
  ('type -> INT_TYPE','type',1,'p_type','main.py',255),
  ('type -> FLOAT_TYPE','type',1,'p_type','main.py',256),
  ('type -> BOOL_TYPE','type',1,'p_type','main.py',257),
  ('type -> CHAR_TYPE','type',1,'p_type','main.py',258),
  ('factor -> INTEGER','factor',1,'p_factor_number','main.py',262),
  ('factor -> FLOAT','factor',1,'p_factor_number','main.py',263),
  ('factor -> CHAR','factor',1,'p_factor_number','main.py',264),
  ('factor -> BOOL','factor',1,'p_factor_number','main.py',265),
  ('factor -> MINUS factor','factor',2,'p_factor_number','main.py',266),
  ('factor -> PLUS factor','factor',2,'p_factor_number','main.py',267),
  ('factor -> LPAREN INTEGER RPAREN','factor',3,'p_factor_number','main.py',268),
  ('factor -> LPAREN FLOAT RPAREN','factor',3,'p_factor_number','main.py',269),
  ('factor -> LPAREN MINUS FLOAT RPAREN','factor',4,'p_factor_number','main.py',270),
  ('statements -> statement','statements',1,'p_statements','main.py',291),
  ('statements -> statement statements','statements',2,'p_statements','main.py',292),
  ('statement -> simple_assignment','statement',1,'p_statement','main.py',299),
  ('statement -> array_declarationTab','statement',1,'p_statement','main.py',300),
  ('statement -> declaration_assignment','statement',1,'p_statement','main.py',301),
  ('statement -> array_assignment','statement',1,'p_statement','main.py',302),
  ('statement -> type declarationTab_listTab SEMICOLON','statement',3,'p_statement','main.py',303),
  ('statement -> const_declarationTab','statement',1,'p_statement','main.py',304),
  ('const_declarationTab -> CONST type ID EQUALS expressionTab SEMICOLON','const_declarationTab',6,'p_const_declarationTab','main.py',307),
  ('array_declarationTab -> type ID LBRACKET INTEGER RBRACKET SEMICOLON','array_declarationTab',6,'p_array_declarationTab','main.py',313),
  ('declarationTab_listTab -> declarationTab','declarationTab_listTab',1,'p_declarationTab_listTab','main.py',328),
  ('declarationTab_listTab -> declarationTab COMMA declarationTab_listTab','declarationTab_listTab',3,'p_declarationTab_listTab','main.py',329),
  ('declarationTab -> ID','declarationTab',1,'p_declarationTab','main.py',336),
  ('declarationTab -> ID EQUALS expressionTab','declarationTab',3,'p_declarationTab','main.py',337),
  ('declarationTab -> ID LBRACKET INTEGER RBRACKET','declarationTab',4,'p_declarationTab','main.py',338),
  ('expressionTab -> ID','expressionTab',1,'p_expressionTab','main.py',351),
  ('expressionTab -> FLOAT','expressionTab',1,'p_expressionTab','main.py',352),
  ('expressionTab -> INTEGER','expressionTab',1,'p_expressionTab','main.py',353),
  ('expressionTab -> CHAR','expressionTab',1,'p_expressionTab','main.py',354),
  ('factor -> ID LBRACKET expression RBRACKET','factor',4,'p_array_access','main.py',361),
  ('array_assignment -> ID LBRACKET expressionTab RBRACKET EQUALS expressionTab SEMICOLON','array_assignment',7,'p_array_assignment','main.py',380),
  ('declaration_assignment -> type ID EQUALS expression SEMICOLON','declaration_assignment',5,'p_declaration_assignment','main.py',409),
  ('simple_assignment -> ID EQUALS expression SEMICOLON','simple_assignment',4,'p_variable_assignment','main.py',441),
  ('expression -> expression OR term','expression',3,'p_expression_el','main.py',502),
  ('expression -> term','expression',1,'p_expression_el','main.py',503),
  ('term -> term AND factor','term',3,'p_term_tl','main.py',523),
  ('term -> factor','term',1,'p_term_tl','main.py',524),
  ('factor -> ID','factor',1,'p_factor_fl','main.py',540),
  ('factor -> TRUE','factor',1,'p_factor_fl','main.py',541),
  ('factor -> FALSE','factor',1,'p_factor_fl','main.py',542),
  ('factor -> NOT ID','factor',2,'p_factor_fl','main.py',543),
  ('statement -> READ LPAREN ID RPAREN SEMICOLON','statement',5,'p_read_statement','main.py',658),
  ('statement -> READ LPAREN ID LBRACKET INTEGER RBRACKET RPAREN SEMICOLON','statement',8,'p_read_statement','main.py',659),
  ('statement -> WRITE LPAREN write_content RPAREN SEMICOLON','statement',5,'p_write_statement','main.py',735),
  ('write_content -> write_item','write_content',1,'p_write_content_single','main.py',740),
  ('write_content -> write_content COMMA write_item','write_content',3,'p_write_content_multiple','main.py',744),
  ('write_item -> ID','write_item',1,'p_write_item','main.py',748),
  ('write_item -> ID LBRACKET INTEGER RBRACKET','write_item',4,'p_write_item','main.py',749),
  ('statement -> FOR LPAREN initialisation COLON step COLON BorneSup RPAREN block','statement',9,'p_statement_FORloop','main.py',785),
  ('initialisation -> ID EQUALS INTEGER','initialisation',3,'p_initialisation','main.py',791),
  ('step -> INTEGER','step',1,'p_step','main.py',800),
  ('step -> ID','step',1,'p_step','main.py',801),
  ('BorneSup -> ID','BorneSup',1,'p_BorneSup','main.py',809),
  ('block -> LBRACE statements RBRACE','block',3,'p_block','main.py',814),
]
