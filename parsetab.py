
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'statementsAND BOOL_TYPE CHAR CHAR_TYPE COMMA CONST ELSE EQ EQUALS FLOAT FLOAT_TYPE FOR GT GTE ID IF INTEGER INT_TYPE LBRACKET LPAREN LT LTE NEQ NOT NUMBER OR RBRACKET READ RPAREN SEMICOLON WRITEstatements : statement\n                  | statement statements statement : simple_assignment\n                 | array_declaration\n                 | array_assignment \n                 | type declaration_list SEMICOLON\n                 | const_declarationsimple_assignment : ID EQUALS expression SEMICOLONconst_declaration : CONST type ID EQUALS expression SEMICOLONarray_declaration : type ID LBRACKET INTEGER RBRACKET SEMICOLONdeclaration_list : declaration\n                        | declaration COMMA declaration_listdeclaration : ID\n                   | ID EQUALS expression\n                   | ID LBRACKET INTEGER RBRACKETexpression : ID\n                  | FLOAT\n                  | INTEGER\n                  | CHARtype : INT_TYPE\n            | FLOAT_TYPE\n            | BOOL_TYPE\n            | CHAR_TYPEexpression : termterm : factorfactor : INTEGERexpression : expression OR expressionexpression :  expression  AND expression  expression : expression EQ expression\n                  | expression NEQ expression\n                  | expression LT expression\n                  | expression GT expression\n                  | expression LTE expression\n                  | expression GTE expressionexpression : NOT expressioncomparison : LPAREN expression RPARENcomparison : INTEGERfactor : comparisonfactor : IDfactor : ID LBRACKET expression RBRACKETarray_assignment : ID LBRACKET expression RBRACKET EQUALS expression SEMICOLONstatement : READ LPAREN ID RPAREN SEMICOLON\n                 | READ LPAREN ID LBRACKET INTEGER RBRACKET RPAREN SEMICOLONstatement : WRITE LPAREN write_content RPAREN SEMICOLONwrite_content : write_itemwrite_content : write_content COMMA write_itemwrite_item : ID\n                  | ID LBRACKET INTEGER RBRACKET'
    
_lr_action_items = {'READ':([0,2,3,4,5,7,25,52,70,83,87,93,96,97,],[8,8,-3,-4,-5,-7,-6,-8,-42,-44,-10,-9,-41,-43,]),'WRITE':([0,2,3,4,5,7,25,52,70,83,87,93,96,97,],[10,10,-3,-4,-5,-7,-6,-8,-42,-44,-10,-9,-41,-43,]),'ID':([0,2,3,4,5,6,7,11,12,13,14,20,21,22,23,24,25,27,28,36,39,51,52,53,54,55,56,57,58,59,60,65,67,70,82,83,87,93,96,97,],[9,9,-3,-4,-5,18,-7,-20,-21,-22,-23,29,30,30,43,44,-6,30,48,30,30,30,-8,30,30,30,30,30,30,30,30,43,30,-42,30,-44,-10,-9,-41,-43,]),'INT_TYPE':([0,2,3,4,5,7,15,25,52,70,83,87,93,96,97,],[11,11,-3,-4,-5,-7,11,-6,-8,-42,-44,-10,-9,-41,-43,]),'FLOAT_TYPE':([0,2,3,4,5,7,15,25,52,70,83,87,93,96,97,],[12,12,-3,-4,-5,-7,12,-6,-8,-42,-44,-10,-9,-41,-43,]),'BOOL_TYPE':([0,2,3,4,5,7,15,25,52,70,83,87,93,96,97,],[13,13,-3,-4,-5,-7,13,-6,-8,-42,-44,-10,-9,-41,-43,]),'CHAR_TYPE':([0,2,3,4,5,7,15,25,52,70,83,87,93,96,97,],[14,14,-3,-4,-5,-7,14,-6,-8,-42,-44,-10,-9,-41,-43,]),'CONST':([0,2,3,4,5,7,25,52,70,83,87,93,96,97,],[15,15,-3,-4,-5,-7,-6,-8,-42,-44,-10,-9,-41,-43,]),'$end':([1,2,3,4,5,7,16,25,52,70,83,87,93,96,97,],[0,-1,-3,-4,-5,-7,-2,-6,-8,-42,-44,-10,-9,-41,-43,]),'LPAREN':([8,10,21,22,27,36,39,51,53,54,55,56,57,58,59,60,67,82,],[20,23,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'EQUALS':([9,18,44,48,63,],[21,27,67,27,82,]),'LBRACKET':([9,18,29,30,43,48,],[22,26,50,51,66,69,]),'SEMICOLON':([17,18,19,30,31,32,33,34,35,37,38,46,47,48,49,61,64,68,73,74,75,76,77,78,79,80,81,86,90,91,94,95,],[25,-13,-11,-16,52,-17,-18,-19,-24,-25,-38,-14,-12,-13,70,-35,83,87,-27,-28,-29,-30,-31,-32,-33,-34,-36,93,-40,96,-15,97,]),'COMMA':([18,19,30,32,33,34,35,37,38,41,42,43,46,48,61,68,73,74,75,76,77,78,79,80,81,84,90,92,94,],[-13,28,-16,-17,-18,-19,-24,-25,-38,65,-45,-47,-14,-13,-35,-15,-27,-28,-29,-30,-31,-32,-33,-34,-36,-46,-40,-48,-15,]),'FLOAT':([21,22,27,36,39,51,53,54,55,56,57,58,59,60,67,82,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'INTEGER':([21,22,26,27,36,39,50,51,53,54,55,56,57,58,59,60,66,67,69,82,],[33,33,45,33,33,33,71,33,33,33,33,33,33,33,33,33,85,33,88,33,]),'CHAR':([21,22,27,36,39,51,53,54,55,56,57,58,59,60,67,82,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'NOT':([21,22,27,36,39,51,53,54,55,56,57,58,59,60,67,82,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'RPAREN':([29,30,32,33,34,35,37,38,41,42,43,61,62,73,74,75,76,77,78,79,80,81,84,89,90,92,],[49,-16,-17,-18,-19,-24,-25,-38,64,-45,-47,-35,81,-27,-28,-29,-30,-31,-32,-33,-34,-36,-46,95,-40,-48,]),'OR':([30,31,32,33,34,35,37,38,40,46,61,62,72,73,74,75,76,77,78,79,80,81,86,90,91,],[-16,53,-17,-18,-19,-24,-25,-38,53,53,53,53,53,53,53,53,53,53,53,53,53,-36,53,-40,53,]),'AND':([30,31,32,33,34,35,37,38,40,46,61,62,72,73,74,75,76,77,78,79,80,81,86,90,91,],[-16,54,-17,-18,-19,-24,-25,-38,54,54,54,54,54,54,54,54,54,54,54,54,54,-36,54,-40,54,]),'EQ':([30,31,32,33,34,35,37,38,40,46,61,62,72,73,74,75,76,77,78,79,80,81,86,90,91,],[-16,55,-17,-18,-19,-24,-25,-38,55,55,55,55,55,55,55,55,55,55,55,55,55,-36,55,-40,55,]),'NEQ':([30,31,32,33,34,35,37,38,40,46,61,62,72,73,74,75,76,77,78,79,80,81,86,90,91,],[-16,56,-17,-18,-19,-24,-25,-38,56,56,56,56,56,56,56,56,56,56,56,56,56,-36,56,-40,56,]),'LT':([30,31,32,33,34,35,37,38,40,46,61,62,72,73,74,75,76,77,78,79,80,81,86,90,91,],[-16,57,-17,-18,-19,-24,-25,-38,57,57,57,57,57,57,57,57,57,57,57,57,57,-36,57,-40,57,]),'GT':([30,31,32,33,34,35,37,38,40,46,61,62,72,73,74,75,76,77,78,79,80,81,86,90,91,],[-16,58,-17,-18,-19,-24,-25,-38,58,58,58,58,58,58,58,58,58,58,58,58,58,-36,58,-40,58,]),'LTE':([30,31,32,33,34,35,37,38,40,46,61,62,72,73,74,75,76,77,78,79,80,81,86,90,91,],[-16,59,-17,-18,-19,-24,-25,-38,59,59,59,59,59,59,59,59,59,59,59,59,59,-36,59,-40,59,]),'GTE':([30,31,32,33,34,35,37,38,40,46,61,62,72,73,74,75,76,77,78,79,80,81,86,90,91,],[-16,60,-17,-18,-19,-24,-25,-38,60,60,60,60,60,60,60,60,60,60,60,60,60,-36,60,-40,60,]),'RBRACKET':([30,32,33,34,35,37,38,40,45,61,71,72,73,74,75,76,77,78,79,80,81,85,88,90,],[-16,-17,-18,-19,-24,-25,-38,63,68,-35,89,90,-27,-28,-29,-30,-31,-32,-33,-34,-36,92,94,-40,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statements':([0,2,],[1,16,]),'statement':([0,2,],[2,2,]),'simple_assignment':([0,2,],[3,3,]),'array_declaration':([0,2,],[4,4,]),'array_assignment':([0,2,],[5,5,]),'type':([0,2,15,],[6,6,24,]),'const_declaration':([0,2,],[7,7,]),'declaration_list':([6,28,],[17,47,]),'declaration':([6,28,],[19,19,]),'expression':([21,22,27,36,39,51,53,54,55,56,57,58,59,60,67,82,],[31,40,46,61,62,72,73,74,75,76,77,78,79,80,86,91,]),'term':([21,22,27,36,39,51,53,54,55,56,57,58,59,60,67,82,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'factor':([21,22,27,36,39,51,53,54,55,56,57,58,59,60,67,82,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'comparison':([21,22,27,36,39,51,53,54,55,56,57,58,59,60,67,82,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'write_content':([23,],[41,]),'write_item':([23,65,],[42,84,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statements","S'",1,None,None,None),
  ('statements -> statement','statements',1,'p_statements','compiler.py',129),
  ('statements -> statement statements','statements',2,'p_statements','compiler.py',130),
  ('statement -> simple_assignment','statement',1,'p_statement','compiler.py',136),
  ('statement -> array_declaration','statement',1,'p_statement','compiler.py',137),
  ('statement -> array_assignment','statement',1,'p_statement','compiler.py',138),
  ('statement -> type declaration_list SEMICOLON','statement',3,'p_statement','compiler.py',139),
  ('statement -> const_declaration','statement',1,'p_statement','compiler.py',140),
  ('simple_assignment -> ID EQUALS expression SEMICOLON','simple_assignment',4,'p_simple_assignment','compiler.py',144),
  ('const_declaration -> CONST type ID EQUALS expression SEMICOLON','const_declaration',6,'p_const_declaration','compiler.py',156),
  ('array_declaration -> type ID LBRACKET INTEGER RBRACKET SEMICOLON','array_declaration',6,'p_array_declaration','compiler.py',163),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','compiler.py',177),
  ('declaration_list -> declaration COMMA declaration_list','declaration_list',3,'p_declaration_list','compiler.py',178),
  ('declaration -> ID','declaration',1,'p_declaration','compiler.py',185),
  ('declaration -> ID EQUALS expression','declaration',3,'p_declaration','compiler.py',186),
  ('declaration -> ID LBRACKET INTEGER RBRACKET','declaration',4,'p_declaration','compiler.py',187),
  ('expression -> ID','expression',1,'p_expression','compiler.py',205),
  ('expression -> FLOAT','expression',1,'p_expression','compiler.py',206),
  ('expression -> INTEGER','expression',1,'p_expression','compiler.py',207),
  ('expression -> CHAR','expression',1,'p_expression','compiler.py',208),
  ('type -> INT_TYPE','type',1,'p_type','compiler.py',217),
  ('type -> FLOAT_TYPE','type',1,'p_type','compiler.py',218),
  ('type -> BOOL_TYPE','type',1,'p_type','compiler.py',219),
  ('type -> CHAR_TYPE','type',1,'p_type','compiler.py',220),
  ('expression -> term','expression',1,'p_expression_term','compiler.py',225),
  ('term -> factor','term',1,'p_term_factor','compiler.py',230),
  ('factor -> INTEGER','factor',1,'p_factor_num','compiler.py',235),
  ('expression -> expression OR expression','expression',3,'p_expression_or','compiler.py',238),
  ('expression -> expression AND expression','expression',3,'p_expression_and','compiler.py',243),
  ('expression -> expression EQ expression','expression',3,'p_expression_comparison','compiler.py',247),
  ('expression -> expression NEQ expression','expression',3,'p_expression_comparison','compiler.py',248),
  ('expression -> expression LT expression','expression',3,'p_expression_comparison','compiler.py',249),
  ('expression -> expression GT expression','expression',3,'p_expression_comparison','compiler.py',250),
  ('expression -> expression LTE expression','expression',3,'p_expression_comparison','compiler.py',251),
  ('expression -> expression GTE expression','expression',3,'p_expression_comparison','compiler.py',252),
  ('expression -> NOT expression','expression',2,'p_expression_not','compiler.py',267),
  ('comparison -> LPAREN expression RPAREN','comparison',3,'p_comparison_expr','compiler.py',271),
  ('comparison -> INTEGER','comparison',1,'p_comparison_number','compiler.py',276),
  ('factor -> comparison','factor',1,'p_factor_comparison','compiler.py',281),
  ('factor -> ID','factor',1,'p_factor_id','compiler.py',290),
  ('factor -> ID LBRACKET expression RBRACKET','factor',4,'p_array_access','compiler.py',306),
  ('array_assignment -> ID LBRACKET expression RBRACKET EQUALS expression SEMICOLON','array_assignment',7,'p_array_assignment','compiler.py',323),
  ('statement -> READ LPAREN ID RPAREN SEMICOLON','statement',5,'p_read_statement','compiler.py',339),
  ('statement -> READ LPAREN ID LBRACKET INTEGER RBRACKET RPAREN SEMICOLON','statement',8,'p_read_statement','compiler.py',340),
  ('statement -> WRITE LPAREN write_content RPAREN SEMICOLON','statement',5,'p_write_statement','compiler.py',416),
  ('write_content -> write_item','write_content',1,'p_write_content_single','compiler.py',426),
  ('write_content -> write_content COMMA write_item','write_content',3,'p_write_content_multiple','compiler.py',430),
  ('write_item -> ID','write_item',1,'p_write_item','compiler.py',434),
  ('write_item -> ID LBRACKET INTEGER RBRACKET','write_item',4,'p_write_item','compiler.py',435),
]
