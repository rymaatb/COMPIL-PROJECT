
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BOOL BOOL_TYPE CHAR CHAR_TYPE COLON COMMA COMMENT CONST DECLARATION DIVIDE ELSE EQ EQUALS FALSE FLOAT FLOAT_TYPE FOR GT GTE ID IF INSTRUCTION INTEGER INT_TYPE LBRACE LBRACKET LPAREN LT LTE MINUS MULTIPLY NEQ NOT NUMBER OR PLUS RBRACE RBRACKET READ RPAREN SEMICOLON TRUE VAR_GLOBAL WRITEstatement : type declaration_list SEMICOLON\n                 | CONST type ID EQUALS expression SEMICOLONdeclaration_list : declaration\n                        | declaration COMMA declaration_listdeclaration : ID\n                   | ID EQUALS expressionstatement : ID EQUALS expression SEMICOLONtype : INT_TYPE\n            | FLOAT_TYPE\n            | BOOL_TYPE\n            | CHAR_TYPEfactor : INTEGER\n              | FLOAT\n              | CHAR\n              | BOOL\n              | MINUS factor\n              | PLUS factor\n              | LPAREN INTEGER RPAREN\n              | LPAREN FLOAT RPAREN\n              | LPAREN MINUS FLOAT RPAREN\n              statements : statement\n                  | statement statements statement : simple_assignment\n                 | array_declarationTab\n                 | array_assignment\n                 | type declarationTab_listTab SEMICOLON\n                 | const_declarationTabsimple_assignment : ID EQUALS expressionTab SEMICOLONconst_declarationTab : CONST type ID EQUALS expressionTab SEMICOLONarray_declarationTab : type ID LBRACKET INTEGER RBRACKET SEMICOLONdeclarationTab_listTab : declarationTab\n                        | declarationTab COMMA declarationTab_listTabdeclarationTab : ID\n                   | ID EQUALS expressionTab\n                   | ID LBRACKET INTEGER RBRACKETexpressionTab : ID\n                  | FLOAT\n                  | INTEGER\n                  | CHARfactor : ID LBRACKET expressionTab RBRACKETarray_assignment : ID LBRACKET expressionTab RBRACKET EQUALS expressionTab SEMICOLONexpression : expression OR term\n                  | termterm : term AND factor \n            | factorfactor : ID\n              | TRUE\n              | FALSE\n              | NOT IDstatement : READ LPAREN ID RPAREN SEMICOLON\n                 | READ LPAREN ID LBRACKET INTEGER RBRACKET RPAREN SEMICOLONstatement : WRITE LPAREN write_content RPAREN SEMICOLONwrite_content : write_itemwrite_content : write_content COMMA write_itemwrite_item : ID\n                  | ID LBRACKET INTEGER RBRACKETstatement : FOR LPAREN initialisation COLON step COLON BorneSup RPAREN block initialisation : ID EQUALS INTEGERstep : INTEGER\n            | IDBorneSup : IDblock : LBRACE statements RBRACE'
    
_lr_action_items = {'CONST':([0,5,6,7,8,27,28,69,71,104,106,113,115,116,124,128,130,131,133,134,],[3,-23,-24,-25,-27,-1,-26,-7,-28,-50,-52,-30,-2,-29,-41,-51,-57,3,3,-62,]),'ID':([0,2,5,6,7,8,12,13,14,15,21,22,23,24,25,26,27,28,30,31,32,43,44,48,67,68,69,70,71,72,87,89,92,93,103,104,106,113,115,116,122,124,128,130,131,133,134,],[4,18,-23,-24,-25,-27,-8,-9,-10,-11,33,34,49,54,57,59,-1,-26,34,64,66,77,77,82,34,49,-7,77,-28,77,57,111,77,49,49,-50,-52,-30,-2,-29,127,-41,-51,-57,4,4,-62,]),'READ':([0,5,6,7,8,27,28,69,71,104,106,113,115,116,124,128,130,131,133,134,],[9,-23,-24,-25,-27,-1,-26,-7,-28,-50,-52,-30,-2,-29,-41,-51,-57,9,9,-62,]),'WRITE':([0,5,6,7,8,27,28,69,71,104,106,113,115,116,124,128,130,131,133,134,],[10,-23,-24,-25,-27,-1,-26,-7,-28,-50,-52,-30,-2,-29,-41,-51,-57,10,10,-62,]),'FOR':([0,5,6,7,8,27,28,69,71,104,106,113,115,116,124,128,130,131,133,134,],[11,-23,-24,-25,-27,-1,-26,-7,-28,-50,-52,-30,-2,-29,-41,-51,-57,11,11,-62,]),'INT_TYPE':([0,3,5,6,7,8,27,28,69,71,104,106,113,115,116,124,128,130,131,133,134,],[12,12,-23,-24,-25,-27,-1,-26,-7,-28,-50,-52,-30,-2,-29,-41,-51,-57,12,12,-62,]),'FLOAT_TYPE':([0,3,5,6,7,8,27,28,69,71,104,106,113,115,116,124,128,130,131,133,134,],[13,13,-23,-24,-25,-27,-1,-26,-7,-28,-50,-52,-30,-2,-29,-41,-51,-57,13,13,-62,]),'BOOL_TYPE':([0,3,5,6,7,8,27,28,69,71,104,106,113,115,116,124,128,130,131,133,134,],[14,14,-23,-24,-25,-27,-1,-26,-7,-28,-50,-52,-30,-2,-29,-41,-51,-57,14,14,-62,]),'CHAR_TYPE':([0,3,5,6,7,8,27,28,69,71,104,106,113,115,116,124,128,130,131,133,134,],[15,15,-23,-24,-25,-27,-1,-26,-7,-28,-50,-52,-30,-2,-29,-41,-51,-57,15,15,-62,]),'$end':([1,5,6,7,8,27,28,69,71,104,106,113,115,116,124,128,130,134,],[0,-23,-24,-25,-27,-1,-26,-7,-28,-50,-52,-30,-2,-29,-41,-51,-57,-62,]),'EQUALS':([4,18,33,59,64,66,83,],[22,30,67,90,92,93,103,]),'LBRACKET':([4,18,34,54,57,66,77,],[23,29,68,85,88,94,68,]),'RBRACE':([5,6,7,8,27,28,69,71,104,106,113,115,116,124,128,130,132,133,134,135,],[-23,-24,-25,-27,-1,-26,-7,-28,-50,-52,-30,-2,-29,-41,-51,-57,134,-21,-62,-22,]),'LPAREN':([9,10,11,22,30,43,44,67,70,72,92,],[24,25,26,45,45,45,45,45,45,45,45,]),'SEMICOLON':([16,17,18,19,20,34,35,36,37,38,39,40,41,42,46,47,49,51,52,53,61,62,63,64,65,66,73,74,75,76,77,78,82,84,86,91,95,96,98,99,100,101,117,118,119,123,125,],[27,28,-5,-3,-31,-36,69,71,-43,-13,-12,-14,-45,-15,-47,-48,-36,-37,-38,-39,-6,-34,-4,-5,-32,-33,-16,-12,-13,-14,-46,-17,-49,104,106,113,115,116,-42,-44,-18,-19,-40,-20,124,-35,128,]),'COMMA':([18,19,20,34,37,38,39,40,41,42,46,47,49,51,52,53,55,56,57,61,62,64,66,73,74,75,76,77,78,82,91,98,99,100,101,107,117,118,121,123,],[-5,31,32,-36,-43,-13,-12,-14,-45,-15,-47,-48,-36,-37,-38,-39,87,-53,-55,-6,-34,-5,-33,-16,-12,-13,-14,-46,-17,-49,-35,-42,-44,-18,-19,-54,-40,-20,-56,-35,]),'FLOAT':([22,23,30,43,44,45,67,68,70,72,81,92,93,103,],[38,51,38,75,75,80,38,51,75,75,102,75,51,51,]),'INTEGER':([22,23,29,30,43,44,45,67,68,70,72,85,88,89,90,92,93,94,103,],[39,52,60,39,74,74,79,39,52,74,74,105,108,110,112,74,52,114,52,]),'CHAR':([22,23,30,43,44,67,68,70,72,92,93,103,],[40,53,40,76,76,40,53,76,76,76,53,53,]),'BOOL':([22,30,43,44,67,70,72,92,],[42,42,42,42,42,42,42,42,]),'MINUS':([22,30,43,44,45,67,70,72,92,],[43,43,43,43,81,43,43,43,43,]),'PLUS':([22,30,43,44,67,70,72,92,],[44,44,44,44,44,44,44,44,]),'TRUE':([22,30,43,44,67,70,72,92,],[46,46,46,46,46,46,46,46,]),'FALSE':([22,30,43,44,67,70,72,92,],[47,47,47,47,47,47,47,47,]),'NOT':([22,30,43,44,67,70,72,92,],[48,48,48,48,48,48,48,48,]),'AND':([34,37,38,39,40,41,42,46,47,73,74,75,76,77,78,82,98,99,100,101,117,118,],[-46,72,-13,-12,-14,-45,-15,-47,-48,-16,-12,-13,-14,-46,-17,-49,72,-44,-18,-19,-40,-20,]),'OR':([34,35,37,38,39,40,41,42,46,47,61,73,74,75,76,77,78,82,95,98,99,100,101,117,118,],[-46,70,-43,-13,-12,-14,-45,-15,-47,-48,70,-16,-12,-13,-14,-46,-17,-49,70,-42,-44,-18,-19,-40,-20,]),'RBRACKET':([49,50,51,52,53,60,97,105,108,114,],[-36,83,-37,-38,-39,91,117,120,121,123,]),'RPAREN':([54,55,56,57,79,80,102,107,120,121,126,127,],[84,86,-53,-55,100,101,118,-54,125,-56,129,-61,]),'COLON':([58,109,110,111,112,],[89,122,-59,-60,-58,]),'LBRACE':([129,],[131,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,131,133,],[1,133,133,]),'type':([0,3,131,133,],[2,21,2,2,]),'simple_assignment':([0,131,133,],[5,5,5,]),'array_declarationTab':([0,131,133,],[6,6,6,]),'array_assignment':([0,131,133,],[7,7,7,]),'const_declarationTab':([0,131,133,],[8,8,8,]),'declaration_list':([2,31,],[16,63,]),'declarationTab_listTab':([2,32,],[17,65,]),'declaration':([2,31,],[19,19,]),'declarationTab':([2,32,],[20,20,]),'expression':([22,30,67,92,],[35,61,95,61,]),'expressionTab':([22,23,30,67,68,93,103,],[36,50,62,96,97,62,119,]),'term':([22,30,67,70,92,],[37,37,37,98,37,]),'factor':([22,30,43,44,67,70,72,92,],[41,41,73,78,41,41,99,41,]),'write_content':([25,],[55,]),'write_item':([25,87,],[56,107,]),'initialisation':([26,],[58,]),'step':([89,],[109,]),'BorneSup':([122,],[126,]),'block':([129,],[130,]),'statements':([131,133,],[132,135,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> type declaration_list SEMICOLON','statement',3,'p_statement_declaration','main.py',182),
  ('statement -> CONST type ID EQUALS expression SEMICOLON','statement',6,'p_statement_declaration','main.py',183),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','main.py',226),
  ('declaration_list -> declaration COMMA declaration_list','declaration_list',3,'p_declaration_list','main.py',227),
  ('declaration -> ID','declaration',1,'p_declaration','main.py',237),
  ('declaration -> ID EQUALS expression','declaration',3,'p_declaration','main.py',238),
  ('statement -> ID EQUALS expression SEMICOLON','statement',4,'p_statement_assignment','main.py',249),
  ('type -> INT_TYPE','type',1,'p_type','main.py',294),
  ('type -> FLOAT_TYPE','type',1,'p_type','main.py',295),
  ('type -> BOOL_TYPE','type',1,'p_type','main.py',296),
  ('type -> CHAR_TYPE','type',1,'p_type','main.py',297),
  ('factor -> INTEGER','factor',1,'p_factor_number','main.py',301),
  ('factor -> FLOAT','factor',1,'p_factor_number','main.py',302),
  ('factor -> CHAR','factor',1,'p_factor_number','main.py',303),
  ('factor -> BOOL','factor',1,'p_factor_number','main.py',304),
  ('factor -> MINUS factor','factor',2,'p_factor_number','main.py',305),
  ('factor -> PLUS factor','factor',2,'p_factor_number','main.py',306),
  ('factor -> LPAREN INTEGER RPAREN','factor',3,'p_factor_number','main.py',307),
  ('factor -> LPAREN FLOAT RPAREN','factor',3,'p_factor_number','main.py',308),
  ('factor -> LPAREN MINUS FLOAT RPAREN','factor',4,'p_factor_number','main.py',309),
  ('statements -> statement','statements',1,'p_statements','main.py',330),
  ('statements -> statement statements','statements',2,'p_statements','main.py',331),
  ('statement -> simple_assignment','statement',1,'p_statement','main.py',338),
  ('statement -> array_declarationTab','statement',1,'p_statement','main.py',339),
  ('statement -> array_assignment','statement',1,'p_statement','main.py',340),
  ('statement -> type declarationTab_listTab SEMICOLON','statement',3,'p_statement','main.py',341),
  ('statement -> const_declarationTab','statement',1,'p_statement','main.py',342),
  ('simple_assignment -> ID EQUALS expressionTab SEMICOLON','simple_assignment',4,'p_simple_assignment','main.py',345),
  ('const_declarationTab -> CONST type ID EQUALS expressionTab SEMICOLON','const_declarationTab',6,'p_const_declarationTab','main.py',361),
  ('array_declarationTab -> type ID LBRACKET INTEGER RBRACKET SEMICOLON','array_declarationTab',6,'p_array_declarationTab','main.py',368),
  ('declarationTab_listTab -> declarationTab','declarationTab_listTab',1,'p_declarationTab_listTab','main.py',381),
  ('declarationTab_listTab -> declarationTab COMMA declarationTab_listTab','declarationTab_listTab',3,'p_declarationTab_listTab','main.py',382),
  ('declarationTab -> ID','declarationTab',1,'p_declarationTab','main.py',389),
  ('declarationTab -> ID EQUALS expressionTab','declarationTab',3,'p_declarationTab','main.py',390),
  ('declarationTab -> ID LBRACKET INTEGER RBRACKET','declarationTab',4,'p_declarationTab','main.py',391),
  ('expressionTab -> ID','expressionTab',1,'p_expressionTab','main.py',404),
  ('expressionTab -> FLOAT','expressionTab',1,'p_expressionTab','main.py',405),
  ('expressionTab -> INTEGER','expressionTab',1,'p_expressionTab','main.py',406),
  ('expressionTab -> CHAR','expressionTab',1,'p_expressionTab','main.py',407),
  ('factor -> ID LBRACKET expressionTab RBRACKET','factor',4,'p_array_access','main.py',412),
  ('array_assignment -> ID LBRACKET expressionTab RBRACKET EQUALS expressionTab SEMICOLON','array_assignment',7,'p_array_assignment','main.py',436),
  ('expression -> expression OR term','expression',3,'p_expression_el','main.py',494),
  ('expression -> term','expression',1,'p_expression_el','main.py',495),
  ('term -> term AND factor','term',3,'p_term_tl','main.py',512),
  ('term -> factor','term',1,'p_term_tl','main.py',513),
  ('factor -> ID','factor',1,'p_factor_fl','main.py',533),
  ('factor -> TRUE','factor',1,'p_factor_fl','main.py',534),
  ('factor -> FALSE','factor',1,'p_factor_fl','main.py',535),
  ('factor -> NOT ID','factor',2,'p_factor_fl','main.py',536),
  ('statement -> READ LPAREN ID RPAREN SEMICOLON','statement',5,'p_read_statement','main.py',658),
  ('statement -> READ LPAREN ID LBRACKET INTEGER RBRACKET RPAREN SEMICOLON','statement',8,'p_read_statement','main.py',659),
  ('statement -> WRITE LPAREN write_content RPAREN SEMICOLON','statement',5,'p_write_statement','main.py',735),
  ('write_content -> write_item','write_content',1,'p_write_content_single','main.py',740),
  ('write_content -> write_content COMMA write_item','write_content',3,'p_write_content_multiple','main.py',744),
  ('write_item -> ID','write_item',1,'p_write_item','main.py',748),
  ('write_item -> ID LBRACKET INTEGER RBRACKET','write_item',4,'p_write_item','main.py',749),
  ('statement -> FOR LPAREN initialisation COLON step COLON BorneSup RPAREN block','statement',9,'p_statement_FORloop','main.py',785),
  ('initialisation -> ID EQUALS INTEGER','initialisation',3,'p_initialisation','main.py',791),
  ('step -> INTEGER','step',1,'p_step','main.py',800),
  ('step -> ID','step',1,'p_step','main.py',801),
  ('BorneSup -> ID','BorneSup',1,'p_BorneSup','main.py',809),
  ('block -> LBRACE statements RBRACE','block',3,'p_block','main.py',814),
]
